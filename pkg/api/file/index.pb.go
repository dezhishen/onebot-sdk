// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: index.proto

package file

import (
	context "context"
	model "github.com/dezhishen/onebot-sdk/pkg/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UploadGroupFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId int64  `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	File    string `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
	Name    string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Folder  string `protobuf:"bytes,4,opt,name=folder,proto3" json:"folder,omitempty"`
}

func (x *UploadGroupFileRequest) Reset() {
	*x = UploadGroupFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadGroupFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadGroupFileRequest) ProtoMessage() {}

func (x *UploadGroupFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_index_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadGroupFileRequest.ProtoReflect.Descriptor instead.
func (*UploadGroupFileRequest) Descriptor() ([]byte, []int) {
	return file_index_proto_rawDescGZIP(), []int{0}
}

func (x *UploadGroupFileRequest) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *UploadGroupFileRequest) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *UploadGroupFileRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UploadGroupFileRequest) GetFolder() string {
	if x != nil {
		return x.Folder
	}
	return ""
}

type DeleteGroupFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId int64  `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	FileId  string `protobuf:"bytes,2,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	Busid   int32  `protobuf:"varint,3,opt,name=busid,proto3" json:"busid,omitempty"`
}

func (x *DeleteGroupFileRequest) Reset() {
	*x = DeleteGroupFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGroupFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGroupFileRequest) ProtoMessage() {}

func (x *DeleteGroupFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_index_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGroupFileRequest.ProtoReflect.Descriptor instead.
func (*DeleteGroupFileRequest) Descriptor() ([]byte, []int) {
	return file_index_proto_rawDescGZIP(), []int{1}
}

func (x *DeleteGroupFileRequest) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *DeleteGroupFileRequest) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *DeleteGroupFileRequest) GetBusid() int32 {
	if x != nil {
		return x.Busid
	}
	return 0
}

type CreateGroupFileFolderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId  int64  `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ParentId string `protobuf:"bytes,3,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
}

func (x *CreateGroupFileFolderRequest) Reset() {
	*x = CreateGroupFileFolderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupFileFolderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupFileFolderRequest) ProtoMessage() {}

func (x *CreateGroupFileFolderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_index_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupFileFolderRequest.ProtoReflect.Descriptor instead.
func (*CreateGroupFileFolderRequest) Descriptor() ([]byte, []int) {
	return file_index_proto_rawDescGZIP(), []int{2}
}

func (x *CreateGroupFileFolderRequest) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *CreateGroupFileFolderRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateGroupFileFolderRequest) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

type DeleteGroupFolderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId  int64  `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	FolderId string `protobuf:"bytes,2,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
}

func (x *DeleteGroupFolderRequest) Reset() {
	*x = DeleteGroupFolderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGroupFolderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGroupFolderRequest) ProtoMessage() {}

func (x *DeleteGroupFolderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_index_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGroupFolderRequest.ProtoReflect.Descriptor instead.
func (*DeleteGroupFolderRequest) Descriptor() ([]byte, []int) {
	return file_index_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteGroupFolderRequest) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *DeleteGroupFolderRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

type GroupFilesByFolderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId  int64  `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	FolderId string `protobuf:"bytes,2,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
}

func (x *GroupFilesByFolderRequest) Reset() {
	*x = GroupFilesByFolderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupFilesByFolderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupFilesByFolderRequest) ProtoMessage() {}

func (x *GroupFilesByFolderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_index_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupFilesByFolderRequest.ProtoReflect.Descriptor instead.
func (*GroupFilesByFolderRequest) Descriptor() ([]byte, []int) {
	return file_index_proto_rawDescGZIP(), []int{4}
}

func (x *GroupFilesByFolderRequest) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GroupFilesByFolderRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

type GetGroupFileUrlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId int64  `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	FileId  string `protobuf:"bytes,2,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	Busid   int32  `protobuf:"varint,3,opt,name=busid,proto3" json:"busid,omitempty"`
}

func (x *GetGroupFileUrlRequest) Reset() {
	*x = GetGroupFileUrlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupFileUrlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupFileUrlRequest) ProtoMessage() {}

func (x *GetGroupFileUrlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_index_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupFileUrlRequest.ProtoReflect.Descriptor instead.
func (*GetGroupFileUrlRequest) Descriptor() ([]byte, []int) {
	return file_index_proto_rawDescGZIP(), []int{5}
}

func (x *GetGroupFileUrlRequest) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GetGroupFileUrlRequest) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *GetGroupFileUrlRequest) GetBusid() int32 {
	if x != nil {
		return x.Busid
	}
	return 0
}

type UploadPrivateFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	File   string `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UploadPrivateFileRequest) Reset() {
	*x = UploadPrivateFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadPrivateFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadPrivateFileRequest) ProtoMessage() {}

func (x *UploadPrivateFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_index_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadPrivateFileRequest.ProtoReflect.Descriptor instead.
func (*UploadPrivateFileRequest) Descriptor() ([]byte, []int) {
	return file_index_proto_rawDescGZIP(), []int{6}
}

func (x *UploadPrivateFileRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UploadPrivateFileRequest) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *UploadPrivateFileRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_index_proto protoreflect.FileDescriptor

var file_index_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x66,
	0x69, 0x6c, 0x65, 0x1a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x73, 0x0a, 0x16,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x22, 0x62, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x75, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x62, 0x75, 0x73, 0x69, 0x64, 0x22, 0x6a, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x52, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x19, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x42, 0x79, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x73, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x75, 0x73, 0x69, 0x64, 0x22, 0x5b,
	0x0a, 0x18, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0xfb, 0x05, 0x0a, 0x18,
	0x4f, 0x6e, 0x65, 0x62, 0x6f, 0x74, 0x41, 0x70, 0x69, 0x46, 0x69, 0x6c, 0x65, 0x47, 0x52, 0x50,
	0x43, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x55,
	0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x6c,
	0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x24, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x47, 0x52, 0x50,
	0x43, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x6f, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x47, 0x52,
	0x50, 0x43, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x2e,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x42,
	0x79, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x47, 0x52, 0x50, 0x43, 0x22, 0x00, 0x12, 0x4b, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c,
	0x12, 0x1c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x47, 0x52, 0x50, 0x43, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x11, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x1e, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x65, 0x7a, 0x68, 0x69, 0x73, 0x68, 0x65,
	0x6e, 0x2f, 0x6f, 0x6e, 0x65, 0x62, 0x6f, 0x74, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x3b, 0x66, 0x69, 0x6c, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_index_proto_rawDescOnce sync.Once
	file_index_proto_rawDescData = file_index_proto_rawDesc
)

func file_index_proto_rawDescGZIP() []byte {
	file_index_proto_rawDescOnce.Do(func() {
		file_index_proto_rawDescData = protoimpl.X.CompressGZIP(file_index_proto_rawDescData)
	})
	return file_index_proto_rawDescData
}

var file_index_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_index_proto_goTypes = []interface{}{
	(*UploadGroupFileRequest)(nil),              // 0: file.UploadGroupFileRequest
	(*DeleteGroupFileRequest)(nil),              // 1: file.DeleteGroupFileRequest
	(*CreateGroupFileFolderRequest)(nil),        // 2: file.CreateGroupFileFolderRequest
	(*DeleteGroupFolderRequest)(nil),            // 3: file.DeleteGroupFolderRequest
	(*GroupFilesByFolderRequest)(nil),           // 4: file.GroupFilesByFolderRequest
	(*GetGroupFileUrlRequest)(nil),              // 5: file.GetGroupFileUrlRequest
	(*UploadPrivateFileRequest)(nil),            // 6: file.UploadPrivateFileRequest
	(*wrapperspb.Int64Value)(nil),               // 7: google.protobuf.Int64Value
	(*emptypb.Empty)(nil),                       // 8: google.protobuf.Empty
	(*model.GroupFileSystemInfoResultGRPC)(nil), // 9: model.GroupFileSystemInfoResultGRPC
	(*model.GroupFilesResultGRPC)(nil),          // 10: model.GroupFilesResultGRPC
	(*model.FileUrlResultGRPC)(nil),             // 11: model.FileUrlResultGRPC
}
var file_index_proto_depIdxs = []int32{
	0,  // 0: file.OnebotApiFileGRPCService.UploadGroupFile:input_type -> file.UploadGroupFileRequest
	1,  // 1: file.OnebotApiFileGRPCService.DeleteGroupFile:input_type -> file.DeleteGroupFileRequest
	2,  // 2: file.OnebotApiFileGRPCService.CreateGroupFileFolder:input_type -> file.CreateGroupFileFolderRequest
	3,  // 3: file.OnebotApiFileGRPCService.DeleteGroupFolder:input_type -> file.DeleteGroupFolderRequest
	7,  // 4: file.OnebotApiFileGRPCService.GetGroupFileSystemInfo:input_type -> google.protobuf.Int64Value
	7,  // 5: file.OnebotApiFileGRPCService.GetGroupRootFiles:input_type -> google.protobuf.Int64Value
	4,  // 6: file.OnebotApiFileGRPCService.GetGroupFilesByFolder:input_type -> file.GroupFilesByFolderRequest
	5,  // 7: file.OnebotApiFileGRPCService.GetGroupFileUrl:input_type -> file.GetGroupFileUrlRequest
	6,  // 8: file.OnebotApiFileGRPCService.UploadPrivateFile:input_type -> file.UploadPrivateFileRequest
	8,  // 9: file.OnebotApiFileGRPCService.UploadGroupFile:output_type -> google.protobuf.Empty
	8,  // 10: file.OnebotApiFileGRPCService.DeleteGroupFile:output_type -> google.protobuf.Empty
	8,  // 11: file.OnebotApiFileGRPCService.CreateGroupFileFolder:output_type -> google.protobuf.Empty
	8,  // 12: file.OnebotApiFileGRPCService.DeleteGroupFolder:output_type -> google.protobuf.Empty
	9,  // 13: file.OnebotApiFileGRPCService.GetGroupFileSystemInfo:output_type -> model.GroupFileSystemInfoResultGRPC
	10, // 14: file.OnebotApiFileGRPCService.GetGroupRootFiles:output_type -> model.GroupFilesResultGRPC
	10, // 15: file.OnebotApiFileGRPCService.GetGroupFilesByFolder:output_type -> model.GroupFilesResultGRPC
	11, // 16: file.OnebotApiFileGRPCService.GetGroupFileUrl:output_type -> model.FileUrlResultGRPC
	8,  // 17: file.OnebotApiFileGRPCService.UploadPrivateFile:output_type -> google.protobuf.Empty
	9,  // [9:18] is the sub-list for method output_type
	0,  // [0:9] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_index_proto_init() }
func file_index_proto_init() {
	if File_index_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_index_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadGroupFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGroupFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroupFileFolderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGroupFolderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupFilesByFolderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupFileUrlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadPrivateFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_index_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_index_proto_goTypes,
		DependencyIndexes: file_index_proto_depIdxs,
		MessageInfos:      file_index_proto_msgTypes,
	}.Build()
	File_index_proto = out.File
	file_index_proto_rawDesc = nil
	file_index_proto_goTypes = nil
	file_index_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OnebotApiFileGRPCServiceClient is the client API for OnebotApiFileGRPCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OnebotApiFileGRPCServiceClient interface {
	// 上传群文件
	// upload_group_file
	// groupId 群号
	// file 文件路径
	// name 文件名
	// folder 群文件目录ID
	UploadGroupFile(ctx context.Context, in *UploadGroupFileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除群文件
	// delete_group_file
	// groupId 群号
	// file_id 文件ID 参考 File 对象
	// busid 文件类型 参考 File 对象
	// DeleteGroupFile(groupId int64, fileId string, busid int32) error
	DeleteGroupFile(ctx context.Context, in *DeleteGroupFileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 创建群文件目录
	// create_group_file_folder
	// groupId 群号
	// name 目录名
	// parentId 父目录ID
	// CreateGroupFileFolder(groupId int64, name string, parentId string) error
	CreateGroupFileFolder(ctx context.Context, in *CreateGroupFileFolderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除群文件目录
	// delete_group_folder
	// groupId 群号
	// folder_id 文件夹ID 参考 Folder 对象
	// DeleteGroupFolder(groupId int64, folderId string) error
	DeleteGroupFolder(ctx context.Context, in *DeleteGroupFolderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取群文件系统信息
	// get_group_file_system_info
	// groupId 群号
	// GetGroupFileSystemInfo(groupId int64) (*model.GroupFileSystemInfoResult, error)
	GetGroupFileSystemInfo(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (*model.GroupFileSystemInfoResultGRPC, error)
	// 获取群根目录文件列表
	// get_group_root_files
	// groupId 群号
	// GetGroupRootFiles(groupId int64) (*model.GroupFilesResult, error)
	GetGroupRootFiles(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (*model.GroupFilesResultGRPC, error)
	// get_group_files_by_folder
	// 获取群文件列表
	// groupId 群号
	// folder_id 文件夹ID
	// GetGroupFilesByFolder(groupId int64, folderId string) (*model.GroupFilesResult, error)
	GetGroupFilesByFolder(ctx context.Context, in *GroupFilesByFolderRequest, opts ...grpc.CallOption) (*model.GroupFilesResultGRPC, error)
	// 获取群文件资源链接
	// get_group_file_url
	// groupId 群号
	// file_id 文件ID 参考 File 对象
	// busid 文件类型 参考 File 对象
	// GetGroupFileUrl(groupId int64, fileId string, busid int32) (*model.FileUrlResult, error)
	GetGroupFileUrl(ctx context.Context, in *GetGroupFileUrlRequest, opts ...grpc.CallOption) (*model.FileUrlResultGRPC, error)
	// 上传好友文件
	// upload_private_file
	// userId 用户ID
	// file 文件路径
	// name 文件名
	// UploadPrivateFile(userId int64, file string, name string) error
	UploadPrivateFile(ctx context.Context, in *UploadPrivateFileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type onebotApiFileGRPCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOnebotApiFileGRPCServiceClient(cc grpc.ClientConnInterface) OnebotApiFileGRPCServiceClient {
	return &onebotApiFileGRPCServiceClient{cc}
}

func (c *onebotApiFileGRPCServiceClient) UploadGroupFile(ctx context.Context, in *UploadGroupFileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/file.OnebotApiFileGRPCService/UploadGroupFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotApiFileGRPCServiceClient) DeleteGroupFile(ctx context.Context, in *DeleteGroupFileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/file.OnebotApiFileGRPCService/DeleteGroupFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotApiFileGRPCServiceClient) CreateGroupFileFolder(ctx context.Context, in *CreateGroupFileFolderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/file.OnebotApiFileGRPCService/CreateGroupFileFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotApiFileGRPCServiceClient) DeleteGroupFolder(ctx context.Context, in *DeleteGroupFolderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/file.OnebotApiFileGRPCService/DeleteGroupFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotApiFileGRPCServiceClient) GetGroupFileSystemInfo(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (*model.GroupFileSystemInfoResultGRPC, error) {
	out := new(model.GroupFileSystemInfoResultGRPC)
	err := c.cc.Invoke(ctx, "/file.OnebotApiFileGRPCService/GetGroupFileSystemInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotApiFileGRPCServiceClient) GetGroupRootFiles(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (*model.GroupFilesResultGRPC, error) {
	out := new(model.GroupFilesResultGRPC)
	err := c.cc.Invoke(ctx, "/file.OnebotApiFileGRPCService/GetGroupRootFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotApiFileGRPCServiceClient) GetGroupFilesByFolder(ctx context.Context, in *GroupFilesByFolderRequest, opts ...grpc.CallOption) (*model.GroupFilesResultGRPC, error) {
	out := new(model.GroupFilesResultGRPC)
	err := c.cc.Invoke(ctx, "/file.OnebotApiFileGRPCService/GetGroupFilesByFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotApiFileGRPCServiceClient) GetGroupFileUrl(ctx context.Context, in *GetGroupFileUrlRequest, opts ...grpc.CallOption) (*model.FileUrlResultGRPC, error) {
	out := new(model.FileUrlResultGRPC)
	err := c.cc.Invoke(ctx, "/file.OnebotApiFileGRPCService/GetGroupFileUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotApiFileGRPCServiceClient) UploadPrivateFile(ctx context.Context, in *UploadPrivateFileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/file.OnebotApiFileGRPCService/UploadPrivateFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnebotApiFileGRPCServiceServer is the server API for OnebotApiFileGRPCService service.
type OnebotApiFileGRPCServiceServer interface {
	// 上传群文件
	// upload_group_file
	// groupId 群号
	// file 文件路径
	// name 文件名
	// folder 群文件目录ID
	UploadGroupFile(context.Context, *UploadGroupFileRequest) (*emptypb.Empty, error)
	// 删除群文件
	// delete_group_file
	// groupId 群号
	// file_id 文件ID 参考 File 对象
	// busid 文件类型 参考 File 对象
	// DeleteGroupFile(groupId int64, fileId string, busid int32) error
	DeleteGroupFile(context.Context, *DeleteGroupFileRequest) (*emptypb.Empty, error)
	// 创建群文件目录
	// create_group_file_folder
	// groupId 群号
	// name 目录名
	// parentId 父目录ID
	// CreateGroupFileFolder(groupId int64, name string, parentId string) error
	CreateGroupFileFolder(context.Context, *CreateGroupFileFolderRequest) (*emptypb.Empty, error)
	// 删除群文件目录
	// delete_group_folder
	// groupId 群号
	// folder_id 文件夹ID 参考 Folder 对象
	// DeleteGroupFolder(groupId int64, folderId string) error
	DeleteGroupFolder(context.Context, *DeleteGroupFolderRequest) (*emptypb.Empty, error)
	// 获取群文件系统信息
	// get_group_file_system_info
	// groupId 群号
	// GetGroupFileSystemInfo(groupId int64) (*model.GroupFileSystemInfoResult, error)
	GetGroupFileSystemInfo(context.Context, *wrapperspb.Int64Value) (*model.GroupFileSystemInfoResultGRPC, error)
	// 获取群根目录文件列表
	// get_group_root_files
	// groupId 群号
	// GetGroupRootFiles(groupId int64) (*model.GroupFilesResult, error)
	GetGroupRootFiles(context.Context, *wrapperspb.Int64Value) (*model.GroupFilesResultGRPC, error)
	// get_group_files_by_folder
	// 获取群文件列表
	// groupId 群号
	// folder_id 文件夹ID
	// GetGroupFilesByFolder(groupId int64, folderId string) (*model.GroupFilesResult, error)
	GetGroupFilesByFolder(context.Context, *GroupFilesByFolderRequest) (*model.GroupFilesResultGRPC, error)
	// 获取群文件资源链接
	// get_group_file_url
	// groupId 群号
	// file_id 文件ID 参考 File 对象
	// busid 文件类型 参考 File 对象
	// GetGroupFileUrl(groupId int64, fileId string, busid int32) (*model.FileUrlResult, error)
	GetGroupFileUrl(context.Context, *GetGroupFileUrlRequest) (*model.FileUrlResultGRPC, error)
	// 上传好友文件
	// upload_private_file
	// userId 用户ID
	// file 文件路径
	// name 文件名
	// UploadPrivateFile(userId int64, file string, name string) error
	UploadPrivateFile(context.Context, *UploadPrivateFileRequest) (*emptypb.Empty, error)
}

// UnimplementedOnebotApiFileGRPCServiceServer can be embedded to have forward compatible implementations.
type UnimplementedOnebotApiFileGRPCServiceServer struct {
}

func (*UnimplementedOnebotApiFileGRPCServiceServer) UploadGroupFile(context.Context, *UploadGroupFileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadGroupFile not implemented")
}
func (*UnimplementedOnebotApiFileGRPCServiceServer) DeleteGroupFile(context.Context, *DeleteGroupFileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroupFile not implemented")
}
func (*UnimplementedOnebotApiFileGRPCServiceServer) CreateGroupFileFolder(context.Context, *CreateGroupFileFolderRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroupFileFolder not implemented")
}
func (*UnimplementedOnebotApiFileGRPCServiceServer) DeleteGroupFolder(context.Context, *DeleteGroupFolderRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroupFolder not implemented")
}
func (*UnimplementedOnebotApiFileGRPCServiceServer) GetGroupFileSystemInfo(context.Context, *wrapperspb.Int64Value) (*model.GroupFileSystemInfoResultGRPC, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupFileSystemInfo not implemented")
}
func (*UnimplementedOnebotApiFileGRPCServiceServer) GetGroupRootFiles(context.Context, *wrapperspb.Int64Value) (*model.GroupFilesResultGRPC, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupRootFiles not implemented")
}
func (*UnimplementedOnebotApiFileGRPCServiceServer) GetGroupFilesByFolder(context.Context, *GroupFilesByFolderRequest) (*model.GroupFilesResultGRPC, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupFilesByFolder not implemented")
}
func (*UnimplementedOnebotApiFileGRPCServiceServer) GetGroupFileUrl(context.Context, *GetGroupFileUrlRequest) (*model.FileUrlResultGRPC, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupFileUrl not implemented")
}
func (*UnimplementedOnebotApiFileGRPCServiceServer) UploadPrivateFile(context.Context, *UploadPrivateFileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadPrivateFile not implemented")
}

func RegisterOnebotApiFileGRPCServiceServer(s *grpc.Server, srv OnebotApiFileGRPCServiceServer) {
	s.RegisterService(&_OnebotApiFileGRPCService_serviceDesc, srv)
}

func _OnebotApiFileGRPCService_UploadGroupFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadGroupFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotApiFileGRPCServiceServer).UploadGroupFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.OnebotApiFileGRPCService/UploadGroupFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotApiFileGRPCServiceServer).UploadGroupFile(ctx, req.(*UploadGroupFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotApiFileGRPCService_DeleteGroupFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotApiFileGRPCServiceServer).DeleteGroupFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.OnebotApiFileGRPCService/DeleteGroupFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotApiFileGRPCServiceServer).DeleteGroupFile(ctx, req.(*DeleteGroupFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotApiFileGRPCService_CreateGroupFileFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupFileFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotApiFileGRPCServiceServer).CreateGroupFileFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.OnebotApiFileGRPCService/CreateGroupFileFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotApiFileGRPCServiceServer).CreateGroupFileFolder(ctx, req.(*CreateGroupFileFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotApiFileGRPCService_DeleteGroupFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotApiFileGRPCServiceServer).DeleteGroupFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.OnebotApiFileGRPCService/DeleteGroupFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotApiFileGRPCServiceServer).DeleteGroupFolder(ctx, req.(*DeleteGroupFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotApiFileGRPCService_GetGroupFileSystemInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.Int64Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotApiFileGRPCServiceServer).GetGroupFileSystemInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.OnebotApiFileGRPCService/GetGroupFileSystemInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotApiFileGRPCServiceServer).GetGroupFileSystemInfo(ctx, req.(*wrapperspb.Int64Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotApiFileGRPCService_GetGroupRootFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.Int64Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotApiFileGRPCServiceServer).GetGroupRootFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.OnebotApiFileGRPCService/GetGroupRootFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotApiFileGRPCServiceServer).GetGroupRootFiles(ctx, req.(*wrapperspb.Int64Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotApiFileGRPCService_GetGroupFilesByFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupFilesByFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotApiFileGRPCServiceServer).GetGroupFilesByFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.OnebotApiFileGRPCService/GetGroupFilesByFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotApiFileGRPCServiceServer).GetGroupFilesByFolder(ctx, req.(*GroupFilesByFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotApiFileGRPCService_GetGroupFileUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupFileUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotApiFileGRPCServiceServer).GetGroupFileUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.OnebotApiFileGRPCService/GetGroupFileUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotApiFileGRPCServiceServer).GetGroupFileUrl(ctx, req.(*GetGroupFileUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotApiFileGRPCService_UploadPrivateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadPrivateFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotApiFileGRPCServiceServer).UploadPrivateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.OnebotApiFileGRPCService/UploadPrivateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotApiFileGRPCServiceServer).UploadPrivateFile(ctx, req.(*UploadPrivateFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OnebotApiFileGRPCService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "file.OnebotApiFileGRPCService",
	HandlerType: (*OnebotApiFileGRPCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadGroupFile",
			Handler:    _OnebotApiFileGRPCService_UploadGroupFile_Handler,
		},
		{
			MethodName: "DeleteGroupFile",
			Handler:    _OnebotApiFileGRPCService_DeleteGroupFile_Handler,
		},
		{
			MethodName: "CreateGroupFileFolder",
			Handler:    _OnebotApiFileGRPCService_CreateGroupFileFolder_Handler,
		},
		{
			MethodName: "DeleteGroupFolder",
			Handler:    _OnebotApiFileGRPCService_DeleteGroupFolder_Handler,
		},
		{
			MethodName: "GetGroupFileSystemInfo",
			Handler:    _OnebotApiFileGRPCService_GetGroupFileSystemInfo_Handler,
		},
		{
			MethodName: "GetGroupRootFiles",
			Handler:    _OnebotApiFileGRPCService_GetGroupRootFiles_Handler,
		},
		{
			MethodName: "GetGroupFilesByFolder",
			Handler:    _OnebotApiFileGRPCService_GetGroupFilesByFolder_Handler,
		},
		{
			MethodName: "GetGroupFileUrl",
			Handler:    _OnebotApiFileGRPCService_GetGroupFileUrl_Handler,
		},
		{
			MethodName: "UploadPrivateFile",
			Handler:    _OnebotApiFileGRPCService_UploadPrivateFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "index.proto",
}

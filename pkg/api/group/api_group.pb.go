// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: api_group.proto

package group

import (
	context "context"
	model "github.com/dezhishen/onebot-sdk/pkg/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetGroupInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId int64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	NoCache bool  `protobuf:"varint,2,opt,name=no_cache,json=noCache,proto3" json:"no_cache,omitempty"`
}

func (x *GetGroupInfoRequest) Reset() {
	*x = GetGroupInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_group_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupInfoRequest) ProtoMessage() {}

func (x *GetGroupInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_group_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupInfoRequest.ProtoReflect.Descriptor instead.
func (*GetGroupInfoRequest) Descriptor() ([]byte, []int) {
	return file_api_group_proto_rawDescGZIP(), []int{0}
}

func (x *GetGroupInfoRequest) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GetGroupInfoRequest) GetNoCache() bool {
	if x != nil {
		return x.NoCache
	}
	return false
}

type GetGroupMemberInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId int64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	UserId  int64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	NoCache bool  `protobuf:"varint,3,opt,name=no_cache,json=noCache,proto3" json:"no_cache,omitempty"`
}

func (x *GetGroupMemberInfoRequest) Reset() {
	*x = GetGroupMemberInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_group_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupMemberInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupMemberInfoRequest) ProtoMessage() {}

func (x *GetGroupMemberInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_group_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupMemberInfoRequest.ProtoReflect.Descriptor instead.
func (*GetGroupMemberInfoRequest) Descriptor() ([]byte, []int) {
	return file_api_group_proto_rawDescGZIP(), []int{1}
}

func (x *GetGroupMemberInfoRequest) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GetGroupMemberInfoRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetGroupMemberInfoRequest) GetNoCache() bool {
	if x != nil {
		return x.NoCache
	}
	return false
}

type GetGroupMemberListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId int64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	NoCache bool  `protobuf:"varint,2,opt,name=no_cache,json=noCache,proto3" json:"no_cache,omitempty"`
}

func (x *GetGroupMemberListRequest) Reset() {
	*x = GetGroupMemberListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_group_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupMemberListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupMemberListRequest) ProtoMessage() {}

func (x *GetGroupMemberListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_group_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupMemberListRequest.ProtoReflect.Descriptor instead.
func (*GetGroupMemberListRequest) Descriptor() ([]byte, []int) {
	return file_api_group_proto_rawDescGZIP(), []int{2}
}

func (x *GetGroupMemberListRequest) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GetGroupMemberListRequest) GetNoCache() bool {
	if x != nil {
		return x.NoCache
	}
	return false
}

type GetGroupHonorInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId int64  `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Type    string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *GetGroupHonorInfoRequest) Reset() {
	*x = GetGroupHonorInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_group_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupHonorInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupHonorInfoRequest) ProtoMessage() {}

func (x *GetGroupHonorInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_group_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupHonorInfoRequest.ProtoReflect.Descriptor instead.
func (*GetGroupHonorInfoRequest) Descriptor() ([]byte, []int) {
	return file_api_group_proto_rawDescGZIP(), []int{3}
}

func (x *GetGroupHonorInfoRequest) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GetGroupHonorInfoRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

var File_api_group_proto protoreflect.FileDescriptor

var file_api_group_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x61, 0x70, 0x69, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x4b, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6e, 0x6f, 0x43, 0x61, 0x63, 0x68, 0x65, 0x22,
	0x6a, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x6e, 0x6f, 0x43, 0x61, 0x63, 0x68, 0x65, 0x22, 0x51, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6e, 0x6f, 0x43, 0x61, 0x63, 0x68, 0x65, 0x22, 0x49,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x6f, 0x6e, 0x6f, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x32, 0xbe, 0x05, 0x0a, 0x19, 0x4f, 0x6e,
	0x65, 0x62, 0x6f, 0x74, 0x41, 0x70, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x47, 0x52, 0x50, 0x43,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x47, 0x52, 0x50, 0x43, 0x22,
	0x00, 0x12, 0x48, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1a, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x47, 0x52, 0x50, 0x43, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x20, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x47, 0x52, 0x50, 0x43, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x2e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x47, 0x52, 0x50,
	0x43, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48,
	0x6f, 0x6e, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x6f, 0x6e, 0x6f, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x6f, 0x6e, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x47, 0x52, 0x50, 0x43, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x73,
	0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x73, 0x67,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x47, 0x52, 0x50, 0x43, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x45, 0x73, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1f,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x73, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x73,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x47, 0x52, 0x50, 0x43, 0x22,
	0x00, 0x12, 0x57, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x41,
	0x6c, 0x6c, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x21, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x41, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x47, 0x52, 0x50, 0x43, 0x22, 0x00, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x65, 0x7a, 0x68, 0x69, 0x73, 0x68,
	0x65, 0x6e, 0x2f, 0x6f, 0x6e, 0x65, 0x62, 0x6f, 0x74, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x3b, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_group_proto_rawDescOnce sync.Once
	file_api_group_proto_rawDescData = file_api_group_proto_rawDesc
)

func file_api_group_proto_rawDescGZIP() []byte {
	file_api_group_proto_rawDescOnce.Do(func() {
		file_api_group_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_group_proto_rawDescData)
	})
	return file_api_group_proto_rawDescData
}

var file_api_group_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_api_group_proto_goTypes = []interface{}{
	(*GetGroupInfoRequest)(nil),              // 0: group.GetGroupInfoRequest
	(*GetGroupMemberInfoRequest)(nil),        // 1: group.GetGroupMemberInfoRequest
	(*GetGroupMemberListRequest)(nil),        // 2: group.GetGroupMemberListRequest
	(*GetGroupHonorInfoRequest)(nil),         // 3: group.GetGroupHonorInfoRequest
	(*wrapperspb.BoolValue)(nil),             // 4: google.protobuf.BoolValue
	(*emptypb.Empty)(nil),                    // 5: google.protobuf.Empty
	(*wrapperspb.Int64Value)(nil),            // 6: google.protobuf.Int64Value
	(*model.GroupInfoResultGRPC)(nil),        // 7: model.GroupInfoResultGRPC
	(*model.GroupListResultGRPC)(nil),        // 8: model.GroupListResultGRPC
	(*model.GroupMemberInfoResultGRPC)(nil),  // 9: model.GroupMemberInfoResultGRPC
	(*model.GroupMemberListResultGRPC)(nil),  // 10: model.GroupMemberListResultGRPC
	(*model.GroupHonorInfoResultGRPC)(nil),   // 11: model.GroupHonorInfoResultGRPC
	(*model.GroupSystemMsgResultGRPC)(nil),   // 12: model.GroupSystemMsgResultGRPC
	(*model.EssenceMsgListResultGRPC)(nil),   // 13: model.EssenceMsgListResultGRPC
	(*model.GroupAtAllRemainResultGRPC)(nil), // 14: model.GroupAtAllRemainResultGRPC
}
var file_api_group_proto_depIdxs = []int32{
	0,  // 0: group.OnebotApiGroupGRPCService.GetGroupInfo:input_type -> group.GetGroupInfoRequest
	4,  // 1: group.OnebotApiGroupGRPCService.GetGroupList:input_type -> google.protobuf.BoolValue
	1,  // 2: group.OnebotApiGroupGRPCService.GetGroupMemberInfo:input_type -> group.GetGroupMemberInfoRequest
	2,  // 3: group.OnebotApiGroupGRPCService.GetGroupMemberList:input_type -> group.GetGroupMemberListRequest
	3,  // 4: group.OnebotApiGroupGRPCService.GetGroupHonorInfo:input_type -> group.GetGroupHonorInfoRequest
	5,  // 5: group.OnebotApiGroupGRPCService.GetGroupSystemMsg:input_type -> google.protobuf.Empty
	6,  // 6: group.OnebotApiGroupGRPCService.GetEssenceMsgList:input_type -> google.protobuf.Int64Value
	6,  // 7: group.OnebotApiGroupGRPCService.GetGroupAtAllRemain:input_type -> google.protobuf.Int64Value
	7,  // 8: group.OnebotApiGroupGRPCService.GetGroupInfo:output_type -> model.GroupInfoResultGRPC
	8,  // 9: group.OnebotApiGroupGRPCService.GetGroupList:output_type -> model.GroupListResultGRPC
	9,  // 10: group.OnebotApiGroupGRPCService.GetGroupMemberInfo:output_type -> model.GroupMemberInfoResultGRPC
	10, // 11: group.OnebotApiGroupGRPCService.GetGroupMemberList:output_type -> model.GroupMemberListResultGRPC
	11, // 12: group.OnebotApiGroupGRPCService.GetGroupHonorInfo:output_type -> model.GroupHonorInfoResultGRPC
	12, // 13: group.OnebotApiGroupGRPCService.GetGroupSystemMsg:output_type -> model.GroupSystemMsgResultGRPC
	13, // 14: group.OnebotApiGroupGRPCService.GetEssenceMsgList:output_type -> model.EssenceMsgListResultGRPC
	14, // 15: group.OnebotApiGroupGRPCService.GetGroupAtAllRemain:output_type -> model.GroupAtAllRemainResultGRPC
	8,  // [8:16] is the sub-list for method output_type
	0,  // [0:8] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_api_group_proto_init() }
func file_api_group_proto_init() {
	if File_api_group_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_group_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_group_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupMemberInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_group_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupMemberListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_group_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupHonorInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_group_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_group_proto_goTypes,
		DependencyIndexes: file_api_group_proto_depIdxs,
		MessageInfos:      file_api_group_proto_msgTypes,
	}.Build()
	File_api_group_proto = out.File
	file_api_group_proto_rawDesc = nil
	file_api_group_proto_goTypes = nil
	file_api_group_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OnebotApiGroupGRPCServiceClient is the client API for OnebotApiGroupGRPCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OnebotApiGroupGRPCServiceClient interface {
	// 获取群信息
	// get_group_info
	// group_id: 群号
	// no_cache: 是否使用缓存（使用缓存可能更新不及时，但响应更快）
	GetGroupInfo(ctx context.Context, in *GetGroupInfoRequest, opts ...grpc.CallOption) (*model.GroupInfoResultGRPC, error)
	// 获取群列表
	// get_group_list
	// no_cache: 是否不使用缓存（使用缓存可能更新不及时，但响应更快）
	GetGroupList(ctx context.Context, in *wrapperspb.BoolValue, opts ...grpc.CallOption) (*model.GroupListResultGRPC, error)
	// 获取群成员信息
	// get_group_member_info
	// group_id: 群号
	// user_id: QQ 号
	// no_cache: 是否不使用缓存（使用缓存可能更新不及时，但响应更快）
	GetGroupMemberInfo(ctx context.Context, in *GetGroupMemberInfoRequest, opts ...grpc.CallOption) (*model.GroupMemberInfoResultGRPC, error)
	// 获取群成员列表
	// get_group_member_list
	// group_id: 群号
	// no_cache: 是否不使用缓存（使用缓存可能更新不及时，但响应更快）
	GetGroupMemberList(ctx context.Context, in *GetGroupMemberListRequest, opts ...grpc.CallOption) (*model.GroupMemberListResultGRPC, error)
	// 获取群荣誉信息
	// get_group_honor_info
	// group_id: 群号
	// type: 群荣誉类型，目前支持 talkative（群聊之火）、performer（群聊炽焰）、legend（群聊传说）、strong_newbie（群聊新星）、emotion（群表情之火）
	GetGroupHonorInfo(ctx context.Context, in *GetGroupHonorInfoRequest, opts ...grpc.CallOption) (*model.GroupHonorInfoResultGRPC, error)
	// 获取群系统消息
	// get_group_system_msg
	GetGroupSystemMsg(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*model.GroupSystemMsgResultGRPC, error)
	// 获取精华消息列表
	// get_essence_msg_list
	// group_id: 群号
	GetEssenceMsgList(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (*model.EssenceMsgListResultGRPC, error)
	// 获取群 @全体成员 剩余次数
	// get_group_at_all_remain
	// group_id: 群号
	GetGroupAtAllRemain(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (*model.GroupAtAllRemainResultGRPC, error)
}

type onebotApiGroupGRPCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOnebotApiGroupGRPCServiceClient(cc grpc.ClientConnInterface) OnebotApiGroupGRPCServiceClient {
	return &onebotApiGroupGRPCServiceClient{cc}
}

func (c *onebotApiGroupGRPCServiceClient) GetGroupInfo(ctx context.Context, in *GetGroupInfoRequest, opts ...grpc.CallOption) (*model.GroupInfoResultGRPC, error) {
	out := new(model.GroupInfoResultGRPC)
	err := c.cc.Invoke(ctx, "/group.OnebotApiGroupGRPCService/GetGroupInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotApiGroupGRPCServiceClient) GetGroupList(ctx context.Context, in *wrapperspb.BoolValue, opts ...grpc.CallOption) (*model.GroupListResultGRPC, error) {
	out := new(model.GroupListResultGRPC)
	err := c.cc.Invoke(ctx, "/group.OnebotApiGroupGRPCService/GetGroupList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotApiGroupGRPCServiceClient) GetGroupMemberInfo(ctx context.Context, in *GetGroupMemberInfoRequest, opts ...grpc.CallOption) (*model.GroupMemberInfoResultGRPC, error) {
	out := new(model.GroupMemberInfoResultGRPC)
	err := c.cc.Invoke(ctx, "/group.OnebotApiGroupGRPCService/GetGroupMemberInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotApiGroupGRPCServiceClient) GetGroupMemberList(ctx context.Context, in *GetGroupMemberListRequest, opts ...grpc.CallOption) (*model.GroupMemberListResultGRPC, error) {
	out := new(model.GroupMemberListResultGRPC)
	err := c.cc.Invoke(ctx, "/group.OnebotApiGroupGRPCService/GetGroupMemberList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotApiGroupGRPCServiceClient) GetGroupHonorInfo(ctx context.Context, in *GetGroupHonorInfoRequest, opts ...grpc.CallOption) (*model.GroupHonorInfoResultGRPC, error) {
	out := new(model.GroupHonorInfoResultGRPC)
	err := c.cc.Invoke(ctx, "/group.OnebotApiGroupGRPCService/GetGroupHonorInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotApiGroupGRPCServiceClient) GetGroupSystemMsg(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*model.GroupSystemMsgResultGRPC, error) {
	out := new(model.GroupSystemMsgResultGRPC)
	err := c.cc.Invoke(ctx, "/group.OnebotApiGroupGRPCService/GetGroupSystemMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotApiGroupGRPCServiceClient) GetEssenceMsgList(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (*model.EssenceMsgListResultGRPC, error) {
	out := new(model.EssenceMsgListResultGRPC)
	err := c.cc.Invoke(ctx, "/group.OnebotApiGroupGRPCService/GetEssenceMsgList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotApiGroupGRPCServiceClient) GetGroupAtAllRemain(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (*model.GroupAtAllRemainResultGRPC, error) {
	out := new(model.GroupAtAllRemainResultGRPC)
	err := c.cc.Invoke(ctx, "/group.OnebotApiGroupGRPCService/GetGroupAtAllRemain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnebotApiGroupGRPCServiceServer is the server API for OnebotApiGroupGRPCService service.
type OnebotApiGroupGRPCServiceServer interface {
	// 获取群信息
	// get_group_info
	// group_id: 群号
	// no_cache: 是否使用缓存（使用缓存可能更新不及时，但响应更快）
	GetGroupInfo(context.Context, *GetGroupInfoRequest) (*model.GroupInfoResultGRPC, error)
	// 获取群列表
	// get_group_list
	// no_cache: 是否不使用缓存（使用缓存可能更新不及时，但响应更快）
	GetGroupList(context.Context, *wrapperspb.BoolValue) (*model.GroupListResultGRPC, error)
	// 获取群成员信息
	// get_group_member_info
	// group_id: 群号
	// user_id: QQ 号
	// no_cache: 是否不使用缓存（使用缓存可能更新不及时，但响应更快）
	GetGroupMemberInfo(context.Context, *GetGroupMemberInfoRequest) (*model.GroupMemberInfoResultGRPC, error)
	// 获取群成员列表
	// get_group_member_list
	// group_id: 群号
	// no_cache: 是否不使用缓存（使用缓存可能更新不及时，但响应更快）
	GetGroupMemberList(context.Context, *GetGroupMemberListRequest) (*model.GroupMemberListResultGRPC, error)
	// 获取群荣誉信息
	// get_group_honor_info
	// group_id: 群号
	// type: 群荣誉类型，目前支持 talkative（群聊之火）、performer（群聊炽焰）、legend（群聊传说）、strong_newbie（群聊新星）、emotion（群表情之火）
	GetGroupHonorInfo(context.Context, *GetGroupHonorInfoRequest) (*model.GroupHonorInfoResultGRPC, error)
	// 获取群系统消息
	// get_group_system_msg
	GetGroupSystemMsg(context.Context, *emptypb.Empty) (*model.GroupSystemMsgResultGRPC, error)
	// 获取精华消息列表
	// get_essence_msg_list
	// group_id: 群号
	GetEssenceMsgList(context.Context, *wrapperspb.Int64Value) (*model.EssenceMsgListResultGRPC, error)
	// 获取群 @全体成员 剩余次数
	// get_group_at_all_remain
	// group_id: 群号
	GetGroupAtAllRemain(context.Context, *wrapperspb.Int64Value) (*model.GroupAtAllRemainResultGRPC, error)
}

// UnimplementedOnebotApiGroupGRPCServiceServer can be embedded to have forward compatible implementations.
type UnimplementedOnebotApiGroupGRPCServiceServer struct {
}

func (*UnimplementedOnebotApiGroupGRPCServiceServer) GetGroupInfo(context.Context, *GetGroupInfoRequest) (*model.GroupInfoResultGRPC, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupInfo not implemented")
}
func (*UnimplementedOnebotApiGroupGRPCServiceServer) GetGroupList(context.Context, *wrapperspb.BoolValue) (*model.GroupListResultGRPC, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupList not implemented")
}
func (*UnimplementedOnebotApiGroupGRPCServiceServer) GetGroupMemberInfo(context.Context, *GetGroupMemberInfoRequest) (*model.GroupMemberInfoResultGRPC, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupMemberInfo not implemented")
}
func (*UnimplementedOnebotApiGroupGRPCServiceServer) GetGroupMemberList(context.Context, *GetGroupMemberListRequest) (*model.GroupMemberListResultGRPC, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupMemberList not implemented")
}
func (*UnimplementedOnebotApiGroupGRPCServiceServer) GetGroupHonorInfo(context.Context, *GetGroupHonorInfoRequest) (*model.GroupHonorInfoResultGRPC, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupHonorInfo not implemented")
}
func (*UnimplementedOnebotApiGroupGRPCServiceServer) GetGroupSystemMsg(context.Context, *emptypb.Empty) (*model.GroupSystemMsgResultGRPC, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupSystemMsg not implemented")
}
func (*UnimplementedOnebotApiGroupGRPCServiceServer) GetEssenceMsgList(context.Context, *wrapperspb.Int64Value) (*model.EssenceMsgListResultGRPC, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEssenceMsgList not implemented")
}
func (*UnimplementedOnebotApiGroupGRPCServiceServer) GetGroupAtAllRemain(context.Context, *wrapperspb.Int64Value) (*model.GroupAtAllRemainResultGRPC, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupAtAllRemain not implemented")
}

func RegisterOnebotApiGroupGRPCServiceServer(s *grpc.Server, srv OnebotApiGroupGRPCServiceServer) {
	s.RegisterService(&_OnebotApiGroupGRPCService_serviceDesc, srv)
}

func _OnebotApiGroupGRPCService_GetGroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotApiGroupGRPCServiceServer).GetGroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.OnebotApiGroupGRPCService/GetGroupInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotApiGroupGRPCServiceServer).GetGroupInfo(ctx, req.(*GetGroupInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotApiGroupGRPCService_GetGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.BoolValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotApiGroupGRPCServiceServer).GetGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.OnebotApiGroupGRPCService/GetGroupList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotApiGroupGRPCServiceServer).GetGroupList(ctx, req.(*wrapperspb.BoolValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotApiGroupGRPCService_GetGroupMemberInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupMemberInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotApiGroupGRPCServiceServer).GetGroupMemberInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.OnebotApiGroupGRPCService/GetGroupMemberInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotApiGroupGRPCServiceServer).GetGroupMemberInfo(ctx, req.(*GetGroupMemberInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotApiGroupGRPCService_GetGroupMemberList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupMemberListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotApiGroupGRPCServiceServer).GetGroupMemberList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.OnebotApiGroupGRPCService/GetGroupMemberList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotApiGroupGRPCServiceServer).GetGroupMemberList(ctx, req.(*GetGroupMemberListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotApiGroupGRPCService_GetGroupHonorInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupHonorInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotApiGroupGRPCServiceServer).GetGroupHonorInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.OnebotApiGroupGRPCService/GetGroupHonorInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotApiGroupGRPCServiceServer).GetGroupHonorInfo(ctx, req.(*GetGroupHonorInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotApiGroupGRPCService_GetGroupSystemMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotApiGroupGRPCServiceServer).GetGroupSystemMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.OnebotApiGroupGRPCService/GetGroupSystemMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotApiGroupGRPCServiceServer).GetGroupSystemMsg(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotApiGroupGRPCService_GetEssenceMsgList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.Int64Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotApiGroupGRPCServiceServer).GetEssenceMsgList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.OnebotApiGroupGRPCService/GetEssenceMsgList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotApiGroupGRPCServiceServer).GetEssenceMsgList(ctx, req.(*wrapperspb.Int64Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotApiGroupGRPCService_GetGroupAtAllRemain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.Int64Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotApiGroupGRPCServiceServer).GetGroupAtAllRemain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.OnebotApiGroupGRPCService/GetGroupAtAllRemain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotApiGroupGRPCServiceServer).GetGroupAtAllRemain(ctx, req.(*wrapperspb.Int64Value))
	}
	return interceptor(ctx, in, info, handler)
}

var _OnebotApiGroupGRPCService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "group.OnebotApiGroupGRPCService",
	HandlerType: (*OnebotApiGroupGRPCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGroupInfo",
			Handler:    _OnebotApiGroupGRPCService_GetGroupInfo_Handler,
		},
		{
			MethodName: "GetGroupList",
			Handler:    _OnebotApiGroupGRPCService_GetGroupList_Handler,
		},
		{
			MethodName: "GetGroupMemberInfo",
			Handler:    _OnebotApiGroupGRPCService_GetGroupMemberInfo_Handler,
		},
		{
			MethodName: "GetGroupMemberList",
			Handler:    _OnebotApiGroupGRPCService_GetGroupMemberList_Handler,
		},
		{
			MethodName: "GetGroupHonorInfo",
			Handler:    _OnebotApiGroupGRPCService_GetGroupHonorInfo_Handler,
		},
		{
			MethodName: "GetGroupSystemMsg",
			Handler:    _OnebotApiGroupGRPCService_GetGroupSystemMsg_Handler,
		},
		{
			MethodName: "GetEssenceMsgList",
			Handler:    _OnebotApiGroupGRPCService_GetEssenceMsgList_Handler,
		},
		{
			MethodName: "GetGroupAtAllRemain",
			Handler:    _OnebotApiGroupGRPCService_GetGroupAtAllRemain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api_group.proto",
}

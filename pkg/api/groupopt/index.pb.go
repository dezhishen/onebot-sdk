// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: index.proto

package groupopt

import (
	context "context"
	model "github.com/dezhishen/onebot-sdk/pkg/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SetGroupNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId   int64  `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	GroupName string `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
}

func (x *SetGroupNameRequest) Reset() {
	*x = SetGroupNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGroupNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGroupNameRequest) ProtoMessage() {}

func (x *SetGroupNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_index_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGroupNameRequest.ProtoReflect.Descriptor instead.
func (*SetGroupNameRequest) Descriptor() ([]byte, []int) {
	return file_index_proto_rawDescGZIP(), []int{0}
}

func (x *SetGroupNameRequest) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *SetGroupNameRequest) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

type SetGroupPortraitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId int64  `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	File    string `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
	Cache   int32  `protobuf:"varint,3,opt,name=cache,proto3" json:"cache,omitempty"`
}

func (x *SetGroupPortraitRequest) Reset() {
	*x = SetGroupPortraitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGroupPortraitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGroupPortraitRequest) ProtoMessage() {}

func (x *SetGroupPortraitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_index_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGroupPortraitRequest.ProtoReflect.Descriptor instead.
func (*SetGroupPortraitRequest) Descriptor() ([]byte, []int) {
	return file_index_proto_rawDescGZIP(), []int{1}
}

func (x *SetGroupPortraitRequest) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *SetGroupPortraitRequest) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *SetGroupPortraitRequest) GetCache() int32 {
	if x != nil {
		return x.Cache
	}
	return 0
}

type SetGroupAdminRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId int64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	UserId  int64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Enable  bool  `protobuf:"varint,3,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *SetGroupAdminRequest) Reset() {
	*x = SetGroupAdminRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGroupAdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGroupAdminRequest) ProtoMessage() {}

func (x *SetGroupAdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_index_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGroupAdminRequest.ProtoReflect.Descriptor instead.
func (*SetGroupAdminRequest) Descriptor() ([]byte, []int) {
	return file_index_proto_rawDescGZIP(), []int{2}
}

func (x *SetGroupAdminRequest) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *SetGroupAdminRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SetGroupAdminRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type SetGroupCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId int64  `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	UserId  int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Card    string `protobuf:"bytes,3,opt,name=card,proto3" json:"card,omitempty"`
}

func (x *SetGroupCardRequest) Reset() {
	*x = SetGroupCardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGroupCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGroupCardRequest) ProtoMessage() {}

func (x *SetGroupCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_index_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGroupCardRequest.ProtoReflect.Descriptor instead.
func (*SetGroupCardRequest) Descriptor() ([]byte, []int) {
	return file_index_proto_rawDescGZIP(), []int{3}
}

func (x *SetGroupCardRequest) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *SetGroupCardRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SetGroupCardRequest) GetCard() string {
	if x != nil {
		return x.Card
	}
	return ""
}

type SetGroupSpecialTitleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId      int64  `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	UserId       int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SpecialTitle string `protobuf:"bytes,3,opt,name=special_title,json=specialTitle,proto3" json:"special_title,omitempty"`
	Duration     uint32 `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *SetGroupSpecialTitleRequest) Reset() {
	*x = SetGroupSpecialTitleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGroupSpecialTitleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGroupSpecialTitleRequest) ProtoMessage() {}

func (x *SetGroupSpecialTitleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_index_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGroupSpecialTitleRequest.ProtoReflect.Descriptor instead.
func (*SetGroupSpecialTitleRequest) Descriptor() ([]byte, []int) {
	return file_index_proto_rawDescGZIP(), []int{4}
}

func (x *SetGroupSpecialTitleRequest) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *SetGroupSpecialTitleRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SetGroupSpecialTitleRequest) GetSpecialTitle() string {
	if x != nil {
		return x.SpecialTitle
	}
	return ""
}

func (x *SetGroupSpecialTitleRequest) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type SetGroupBanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId  int64  `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	UserId   int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Duration uint32 `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *SetGroupBanRequest) Reset() {
	*x = SetGroupBanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGroupBanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGroupBanRequest) ProtoMessage() {}

func (x *SetGroupBanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_index_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGroupBanRequest.ProtoReflect.Descriptor instead.
func (*SetGroupBanRequest) Descriptor() ([]byte, []int) {
	return file_index_proto_rawDescGZIP(), []int{5}
}

func (x *SetGroupBanRequest) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *SetGroupBanRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SetGroupBanRequest) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type SetGroupWholeBanequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId int64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Enable  bool  `protobuf:"varint,2,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *SetGroupWholeBanequest) Reset() {
	*x = SetGroupWholeBanequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGroupWholeBanequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGroupWholeBanequest) ProtoMessage() {}

func (x *SetGroupWholeBanequest) ProtoReflect() protoreflect.Message {
	mi := &file_index_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGroupWholeBanequest.ProtoReflect.Descriptor instead.
func (*SetGroupWholeBanequest) Descriptor() ([]byte, []int) {
	return file_index_proto_rawDescGZIP(), []int{6}
}

func (x *SetGroupWholeBanequest) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *SetGroupWholeBanequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type SetGroupAnonymousBanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId       int64                `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Anonymous     *model.AnonymousGRPC `protobuf:"bytes,2,opt,name=anonymous,proto3" json:"anonymous,omitempty"`
	AnonymousFlag string               `protobuf:"bytes,3,opt,name=anonymous_flag,json=anonymousFlag,proto3" json:"anonymous_flag,omitempty"`
	Duration      uint32               `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *SetGroupAnonymousBanRequest) Reset() {
	*x = SetGroupAnonymousBanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGroupAnonymousBanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGroupAnonymousBanRequest) ProtoMessage() {}

func (x *SetGroupAnonymousBanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_index_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGroupAnonymousBanRequest.ProtoReflect.Descriptor instead.
func (*SetGroupAnonymousBanRequest) Descriptor() ([]byte, []int) {
	return file_index_proto_rawDescGZIP(), []int{7}
}

func (x *SetGroupAnonymousBanRequest) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *SetGroupAnonymousBanRequest) GetAnonymous() *model.AnonymousGRPC {
	if x != nil {
		return x.Anonymous
	}
	return nil
}

func (x *SetGroupAnonymousBanRequest) GetAnonymousFlag() string {
	if x != nil {
		return x.AnonymousFlag
	}
	return ""
}

func (x *SetGroupAnonymousBanRequest) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type SetGroupAnonymousRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId int64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Enable  bool  `protobuf:"varint,2,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *SetGroupAnonymousRequest) Reset() {
	*x = SetGroupAnonymousRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGroupAnonymousRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGroupAnonymousRequest) ProtoMessage() {}

func (x *SetGroupAnonymousRequest) ProtoReflect() protoreflect.Message {
	mi := &file_index_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGroupAnonymousRequest.ProtoReflect.Descriptor instead.
func (*SetGroupAnonymousRequest) Descriptor() ([]byte, []int) {
	return file_index_proto_rawDescGZIP(), []int{8}
}

func (x *SetGroupAnonymousRequest) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *SetGroupAnonymousRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type SendGroupNoticeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId int64  `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Image   string `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *SendGroupNoticeRequest) Reset() {
	*x = SendGroupNoticeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendGroupNoticeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendGroupNoticeRequest) ProtoMessage() {}

func (x *SendGroupNoticeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_index_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendGroupNoticeRequest.ProtoReflect.Descriptor instead.
func (*SendGroupNoticeRequest) Descriptor() ([]byte, []int) {
	return file_index_proto_rawDescGZIP(), []int{9}
}

func (x *SendGroupNoticeRequest) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *SendGroupNoticeRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SendGroupNoticeRequest) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

type SetGroupKickRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId          int64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	UserId           int64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RejectAddRequest bool  `protobuf:"varint,3,opt,name=reject_add_request,json=rejectAddRequest,proto3" json:"reject_add_request,omitempty"`
}

func (x *SetGroupKickRequest) Reset() {
	*x = SetGroupKickRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGroupKickRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGroupKickRequest) ProtoMessage() {}

func (x *SetGroupKickRequest) ProtoReflect() protoreflect.Message {
	mi := &file_index_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGroupKickRequest.ProtoReflect.Descriptor instead.
func (*SetGroupKickRequest) Descriptor() ([]byte, []int) {
	return file_index_proto_rawDescGZIP(), []int{10}
}

func (x *SetGroupKickRequest) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *SetGroupKickRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SetGroupKickRequest) GetRejectAddRequest() bool {
	if x != nil {
		return x.RejectAddRequest
	}
	return false
}

type SetGroupLeaveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId   int64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	IsDismiss bool  `protobuf:"varint,2,opt,name=is_dismiss,json=isDismiss,proto3" json:"is_dismiss,omitempty"`
}

func (x *SetGroupLeaveRequest) Reset() {
	*x = SetGroupLeaveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_index_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGroupLeaveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGroupLeaveRequest) ProtoMessage() {}

func (x *SetGroupLeaveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_index_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGroupLeaveRequest.ProtoReflect.Descriptor instead.
func (*SetGroupLeaveRequest) Descriptor() ([]byte, []int) {
	return file_index_proto_rawDescGZIP(), []int{11}
}

func (x *SetGroupLeaveRequest) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *SetGroupLeaveRequest) GetIsDismiss() bool {
	if x != nil {
		return x.IsDismiss
	}
	return false
}

var File_index_proto protoreflect.FileDescriptor

var file_index_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x6f, 0x70, 0x74, 0x1a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4f, 0x0a,
	0x13, 0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5e,
	0x0a, 0x17, 0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x22, 0x62,
	0x0a, 0x14, 0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x22, 0x5d, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x61, 0x72,
	0x64, 0x22, 0x92, 0x01, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x64, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x16,
	0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x68, 0x6f, 0x6c, 0x65, 0x42, 0x61, 0x6e,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x1b, 0x53, 0x65,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x42,
	0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x47, 0x52, 0x50, 0x43, 0x52, 0x09, 0x61,
	0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6e, 0x6f, 0x6e,
	0x79, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4d, 0x0a, 0x18, 0x53,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x63, 0x0a, 0x16, 0x53, 0x65,
	0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22,
	0x77, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x69, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x50, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x32, 0xf5, 0x09, 0x0a, 0x1c, 0x4f,
	0x6e, 0x65, 0x62, 0x6f, 0x74, 0x41, 0x70, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x74,
	0x47, 0x52, 0x50, 0x43, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x53,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x2e, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x6f, 0x70, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x50, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x12, 0x21, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x6f, 0x70, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x72, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x1e, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6f, 0x70,
	0x74, 0x2e, 0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x47, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x1d, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6f, 0x70, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x14, 0x53, 0x65, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x25, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6f, 0x70, 0x74, 0x2e, 0x53, 0x65, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x45, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x61,
	0x6e, 0x12, 0x1c, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6f, 0x70, 0x74, 0x2e, 0x53, 0x65, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x10, 0x53, 0x65, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x68, 0x6f, 0x6c, 0x65, 0x42, 0x61, 0x6e, 0x12, 0x20, 0x2e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x6f, 0x70, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x57, 0x68, 0x6f, 0x6c, 0x65, 0x42, 0x61, 0x6e, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x14, 0x53, 0x65, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x42, 0x61,
	0x6e, 0x12, 0x25, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6f, 0x70, 0x74, 0x2e, 0x53, 0x65, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x42, 0x61,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x46, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x45, 0x73, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x4d, 0x73, 0x67, 0x12, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x10, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x45, 0x73, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x51, 0x0a,
	0x11, 0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f,
	0x75, 0x73, 0x12, 0x22, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6f, 0x70, 0x74, 0x2e, 0x53, 0x65,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x4d, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x74,
	0x69, 0x63, 0x65, 0x12, 0x20, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6f, 0x70, 0x74, 0x2e, 0x53,
	0x65, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x4d, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x63,
	0x65, 0x12, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1c,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x47, 0x52, 0x50, 0x43, 0x22, 0x00, 0x12, 0x47,
	0x0a, 0x0c, 0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x69, 0x63, 0x6b, 0x12, 0x1d,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6f, 0x70, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4b, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x12, 0x1e, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x6f, 0x70, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x64, 0x65, 0x7a, 0x68, 0x69, 0x73, 0x68, 0x65, 0x6e, 0x2f, 0x6f, 0x6e, 0x65, 0x62, 0x6f,
	0x74, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x6f, 0x70, 0x74, 0x3b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6f, 0x70, 0x74, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_index_proto_rawDescOnce sync.Once
	file_index_proto_rawDescData = file_index_proto_rawDesc
)

func file_index_proto_rawDescGZIP() []byte {
	file_index_proto_rawDescOnce.Do(func() {
		file_index_proto_rawDescData = protoimpl.X.CompressGZIP(file_index_proto_rawDescData)
	})
	return file_index_proto_rawDescData
}

var file_index_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_index_proto_goTypes = []interface{}{
	(*SetGroupNameRequest)(nil),         // 0: groupopt.SetGroupNameRequest
	(*SetGroupPortraitRequest)(nil),     // 1: groupopt.SetGroupPortraitRequest
	(*SetGroupAdminRequest)(nil),        // 2: groupopt.SetGroupAdminRequest
	(*SetGroupCardRequest)(nil),         // 3: groupopt.SetGroupCardRequest
	(*SetGroupSpecialTitleRequest)(nil), // 4: groupopt.SetGroupSpecialTitleRequest
	(*SetGroupBanRequest)(nil),          // 5: groupopt.SetGroupBanRequest
	(*SetGroupWholeBanequest)(nil),      // 6: groupopt.SetGroupWholeBanequest
	(*SetGroupAnonymousBanRequest)(nil), // 7: groupopt.SetGroupAnonymousBanRequest
	(*SetGroupAnonymousRequest)(nil),    // 8: groupopt.SetGroupAnonymousRequest
	(*SendGroupNoticeRequest)(nil),      // 9: groupopt.SendGroupNoticeRequest
	(*SetGroupKickRequest)(nil),         // 10: groupopt.SetGroupKickRequest
	(*SetGroupLeaveRequest)(nil),        // 11: groupopt.SetGroupLeaveRequest
	(*model.AnonymousGRPC)(nil),         // 12: model.AnonymousGRPC
	(*wrapperspb.Int64Value)(nil),       // 13: google.protobuf.Int64Value
	(*emptypb.Empty)(nil),               // 14: google.protobuf.Empty
	(*model.GroupNoticeResultGRPC)(nil), // 15: model.GroupNoticeResultGRPC
}
var file_index_proto_depIdxs = []int32{
	12, // 0: groupopt.SetGroupAnonymousBanRequest.anonymous:type_name -> model.AnonymousGRPC
	0,  // 1: groupopt.OnebotApiGroupOptGRPCService.SetGroupName:input_type -> groupopt.SetGroupNameRequest
	1,  // 2: groupopt.OnebotApiGroupOptGRPCService.SetGroupPortrait:input_type -> groupopt.SetGroupPortraitRequest
	2,  // 3: groupopt.OnebotApiGroupOptGRPCService.SetGroupAdmin:input_type -> groupopt.SetGroupAdminRequest
	3,  // 4: groupopt.OnebotApiGroupOptGRPCService.SetGroupCard:input_type -> groupopt.SetGroupCardRequest
	4,  // 5: groupopt.OnebotApiGroupOptGRPCService.SetGroupSpecialTitle:input_type -> groupopt.SetGroupSpecialTitleRequest
	5,  // 6: groupopt.OnebotApiGroupOptGRPCService.SetGroupBan:input_type -> groupopt.SetGroupBanRequest
	6,  // 7: groupopt.OnebotApiGroupOptGRPCService.SetGroupWholeBan:input_type -> groupopt.SetGroupWholeBanequest
	7,  // 8: groupopt.OnebotApiGroupOptGRPCService.SetGroupAnonymousBan:input_type -> groupopt.SetGroupAnonymousBanRequest
	13, // 9: groupopt.OnebotApiGroupOptGRPCService.SetEssenceMsg:input_type -> google.protobuf.Int64Value
	13, // 10: groupopt.OnebotApiGroupOptGRPCService.DeleteEssenceMsg:input_type -> google.protobuf.Int64Value
	13, // 11: groupopt.OnebotApiGroupOptGRPCService.SendGroupSign:input_type -> google.protobuf.Int64Value
	8,  // 12: groupopt.OnebotApiGroupOptGRPCService.SetGroupAnonymous:input_type -> groupopt.SetGroupAnonymousRequest
	9,  // 13: groupopt.OnebotApiGroupOptGRPCService.SendGroupNotice:input_type -> groupopt.SendGroupNoticeRequest
	13, // 14: groupopt.OnebotApiGroupOptGRPCService.GetGroupNotice:input_type -> google.protobuf.Int64Value
	10, // 15: groupopt.OnebotApiGroupOptGRPCService.SetGroupKick:input_type -> groupopt.SetGroupKickRequest
	11, // 16: groupopt.OnebotApiGroupOptGRPCService.SetGroupLeave:input_type -> groupopt.SetGroupLeaveRequest
	14, // 17: groupopt.OnebotApiGroupOptGRPCService.SetGroupName:output_type -> google.protobuf.Empty
	14, // 18: groupopt.OnebotApiGroupOptGRPCService.SetGroupPortrait:output_type -> google.protobuf.Empty
	14, // 19: groupopt.OnebotApiGroupOptGRPCService.SetGroupAdmin:output_type -> google.protobuf.Empty
	14, // 20: groupopt.OnebotApiGroupOptGRPCService.SetGroupCard:output_type -> google.protobuf.Empty
	14, // 21: groupopt.OnebotApiGroupOptGRPCService.SetGroupSpecialTitle:output_type -> google.protobuf.Empty
	14, // 22: groupopt.OnebotApiGroupOptGRPCService.SetGroupBan:output_type -> google.protobuf.Empty
	14, // 23: groupopt.OnebotApiGroupOptGRPCService.SetGroupWholeBan:output_type -> google.protobuf.Empty
	14, // 24: groupopt.OnebotApiGroupOptGRPCService.SetGroupAnonymousBan:output_type -> google.protobuf.Empty
	14, // 25: groupopt.OnebotApiGroupOptGRPCService.SetEssenceMsg:output_type -> google.protobuf.Empty
	14, // 26: groupopt.OnebotApiGroupOptGRPCService.DeleteEssenceMsg:output_type -> google.protobuf.Empty
	14, // 27: groupopt.OnebotApiGroupOptGRPCService.SendGroupSign:output_type -> google.protobuf.Empty
	14, // 28: groupopt.OnebotApiGroupOptGRPCService.SetGroupAnonymous:output_type -> google.protobuf.Empty
	14, // 29: groupopt.OnebotApiGroupOptGRPCService.SendGroupNotice:output_type -> google.protobuf.Empty
	15, // 30: groupopt.OnebotApiGroupOptGRPCService.GetGroupNotice:output_type -> model.GroupNoticeResultGRPC
	14, // 31: groupopt.OnebotApiGroupOptGRPCService.SetGroupKick:output_type -> google.protobuf.Empty
	14, // 32: groupopt.OnebotApiGroupOptGRPCService.SetGroupLeave:output_type -> google.protobuf.Empty
	17, // [17:33] is the sub-list for method output_type
	1,  // [1:17] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_index_proto_init() }
func file_index_proto_init() {
	if File_index_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_index_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGroupNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGroupPortraitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGroupAdminRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGroupCardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGroupSpecialTitleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGroupBanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGroupWholeBanequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGroupAnonymousBanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGroupAnonymousRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendGroupNoticeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGroupKickRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_index_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGroupLeaveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_index_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_index_proto_goTypes,
		DependencyIndexes: file_index_proto_depIdxs,
		MessageInfos:      file_index_proto_msgTypes,
	}.Build()
	File_index_proto = out.File
	file_index_proto_rawDesc = nil
	file_index_proto_goTypes = nil
	file_index_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OnebotApiGroupOptGRPCServiceClient is the client API for OnebotApiGroupOptGRPCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OnebotApiGroupOptGRPCServiceClient interface {
	// 设置群名
	// set_group_name
	// groupId 群号
	SetGroupName(ctx context.Context, in *SetGroupNameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 设置群头像
	// set_group_portrait
	// groupId 群号
	// file 图片文件路径
	// cache 缓存时间
	SetGroupPortrait(ctx context.Context, in *SetGroupPortraitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// set_group_admin
	// 设置群管理员
	// groupId 群号
	// userId QQ 号
	// enable true 为设置，false 为取消
	SetGroupAdmin(ctx context.Context, in *SetGroupAdminRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 设置群名片
	// set_group_card
	// groupId 群号
	// userId QQ 号
	// card 群名片内容，不填或空字符串表示删除群名片
	SetGroupCard(ctx context.Context, in *SetGroupCardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 设置群头衔
	// set_group_special_title
	// groupId 群号
	// userId QQ 号
	// specialTitle 头衔，不填或空字符串表示删除群头衔
	// duration 专属头衔有效期, 单位秒, -1 表示永久, 不过此项似乎没有效果, 可能是只有某些特殊的时间长度有效, 有待测试
	SetGroupSpecialTitle(ctx context.Context, in *SetGroupSpecialTitleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 禁言群成员
	// set_group_ban
	// groupId 群号
	// userId QQ 号
	// duration 禁言时长，单位秒，0 表示取消禁言
	SetGroupBan(ctx context.Context, in *SetGroupBanRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 设置全群禁言
	// set_group_whole_ban
	// groupId 群号
	// enable 是否禁言
	SetGroupWholeBan(ctx context.Context, in *SetGroupWholeBanequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 禁言群匿名成员
	// set_group_anonymous_ban
	// groupId 群号
	// anonymous 可选, 要禁言的匿名用户对象（群消息上报的 anonymous 字段）
	// anonymousFlag 可选, 要禁言的匿名用户的 flag（需从群消息上报的数据中获得）
	// 上面的 anonymous 和 anonymous_flag 两者任选其一传入即可, 若都传入, 则使用 anonymous。
	// duration 禁言时长，单位秒，不能超过 30 天
	SetGroupAnonymousBan(ctx context.Context, in *SetGroupAnonymousBanRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 设置精华消息
	// set_essence_msg
	// message_id 消息 ID
	SetEssenceMsg(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除精华消息
	// delete_essence_msg
	// message_id 消息 ID
	DeleteEssenceMsg(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 发送群签到
	// send_group_sign
	// groupId 群号
	SendGroupSign(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 设置群匿名
	// set_group_anonymous
	// groupId 群号
	// enable 是否允许匿名聊天
	SetGroupAnonymous(ctx context.Context, in *SetGroupAnonymousRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 发送群公告
	// _send_group_notice
	// groupId 群号
	// content 公告内容
	// image 图片文件路径（可选）
	SendGroupNotice(ctx context.Context, in *SendGroupNoticeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取群公告
	// _get_group_notice
	// groupId 群号
	GetGroupNotice(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (*model.GroupNoticeResultGRPC, error)
	// 群组踢人
	// set_group_kick
	// groupId 群号
	// userId QQ 号
	// rejectAddRequest 是否拒绝此人的加群请求
	SetGroupKick(ctx context.Context, in *SetGroupKickRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 退出群组
	// set_group_leave
	// groupId 群号
	// isDismiss 是否解散，如果登录号是群主，则仅在此项为 true 时能够解散
	SetGroupLeave(ctx context.Context, in *SetGroupLeaveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type onebotApiGroupOptGRPCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOnebotApiGroupOptGRPCServiceClient(cc grpc.ClientConnInterface) OnebotApiGroupOptGRPCServiceClient {
	return &onebotApiGroupOptGRPCServiceClient{cc}
}

func (c *onebotApiGroupOptGRPCServiceClient) SetGroupName(ctx context.Context, in *SetGroupNameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/groupopt.OnebotApiGroupOptGRPCService/SetGroupName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotApiGroupOptGRPCServiceClient) SetGroupPortrait(ctx context.Context, in *SetGroupPortraitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/groupopt.OnebotApiGroupOptGRPCService/SetGroupPortrait", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotApiGroupOptGRPCServiceClient) SetGroupAdmin(ctx context.Context, in *SetGroupAdminRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/groupopt.OnebotApiGroupOptGRPCService/SetGroupAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotApiGroupOptGRPCServiceClient) SetGroupCard(ctx context.Context, in *SetGroupCardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/groupopt.OnebotApiGroupOptGRPCService/SetGroupCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotApiGroupOptGRPCServiceClient) SetGroupSpecialTitle(ctx context.Context, in *SetGroupSpecialTitleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/groupopt.OnebotApiGroupOptGRPCService/SetGroupSpecialTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotApiGroupOptGRPCServiceClient) SetGroupBan(ctx context.Context, in *SetGroupBanRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/groupopt.OnebotApiGroupOptGRPCService/SetGroupBan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotApiGroupOptGRPCServiceClient) SetGroupWholeBan(ctx context.Context, in *SetGroupWholeBanequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/groupopt.OnebotApiGroupOptGRPCService/SetGroupWholeBan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotApiGroupOptGRPCServiceClient) SetGroupAnonymousBan(ctx context.Context, in *SetGroupAnonymousBanRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/groupopt.OnebotApiGroupOptGRPCService/SetGroupAnonymousBan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotApiGroupOptGRPCServiceClient) SetEssenceMsg(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/groupopt.OnebotApiGroupOptGRPCService/SetEssenceMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotApiGroupOptGRPCServiceClient) DeleteEssenceMsg(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/groupopt.OnebotApiGroupOptGRPCService/DeleteEssenceMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotApiGroupOptGRPCServiceClient) SendGroupSign(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/groupopt.OnebotApiGroupOptGRPCService/SendGroupSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotApiGroupOptGRPCServiceClient) SetGroupAnonymous(ctx context.Context, in *SetGroupAnonymousRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/groupopt.OnebotApiGroupOptGRPCService/SetGroupAnonymous", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotApiGroupOptGRPCServiceClient) SendGroupNotice(ctx context.Context, in *SendGroupNoticeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/groupopt.OnebotApiGroupOptGRPCService/SendGroupNotice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotApiGroupOptGRPCServiceClient) GetGroupNotice(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (*model.GroupNoticeResultGRPC, error) {
	out := new(model.GroupNoticeResultGRPC)
	err := c.cc.Invoke(ctx, "/groupopt.OnebotApiGroupOptGRPCService/GetGroupNotice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotApiGroupOptGRPCServiceClient) SetGroupKick(ctx context.Context, in *SetGroupKickRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/groupopt.OnebotApiGroupOptGRPCService/SetGroupKick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotApiGroupOptGRPCServiceClient) SetGroupLeave(ctx context.Context, in *SetGroupLeaveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/groupopt.OnebotApiGroupOptGRPCService/SetGroupLeave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnebotApiGroupOptGRPCServiceServer is the server API for OnebotApiGroupOptGRPCService service.
type OnebotApiGroupOptGRPCServiceServer interface {
	// 设置群名
	// set_group_name
	// groupId 群号
	SetGroupName(context.Context, *SetGroupNameRequest) (*emptypb.Empty, error)
	// 设置群头像
	// set_group_portrait
	// groupId 群号
	// file 图片文件路径
	// cache 缓存时间
	SetGroupPortrait(context.Context, *SetGroupPortraitRequest) (*emptypb.Empty, error)
	// set_group_admin
	// 设置群管理员
	// groupId 群号
	// userId QQ 号
	// enable true 为设置，false 为取消
	SetGroupAdmin(context.Context, *SetGroupAdminRequest) (*emptypb.Empty, error)
	// 设置群名片
	// set_group_card
	// groupId 群号
	// userId QQ 号
	// card 群名片内容，不填或空字符串表示删除群名片
	SetGroupCard(context.Context, *SetGroupCardRequest) (*emptypb.Empty, error)
	// 设置群头衔
	// set_group_special_title
	// groupId 群号
	// userId QQ 号
	// specialTitle 头衔，不填或空字符串表示删除群头衔
	// duration 专属头衔有效期, 单位秒, -1 表示永久, 不过此项似乎没有效果, 可能是只有某些特殊的时间长度有效, 有待测试
	SetGroupSpecialTitle(context.Context, *SetGroupSpecialTitleRequest) (*emptypb.Empty, error)
	// 禁言群成员
	// set_group_ban
	// groupId 群号
	// userId QQ 号
	// duration 禁言时长，单位秒，0 表示取消禁言
	SetGroupBan(context.Context, *SetGroupBanRequest) (*emptypb.Empty, error)
	// 设置全群禁言
	// set_group_whole_ban
	// groupId 群号
	// enable 是否禁言
	SetGroupWholeBan(context.Context, *SetGroupWholeBanequest) (*emptypb.Empty, error)
	// 禁言群匿名成员
	// set_group_anonymous_ban
	// groupId 群号
	// anonymous 可选, 要禁言的匿名用户对象（群消息上报的 anonymous 字段）
	// anonymousFlag 可选, 要禁言的匿名用户的 flag（需从群消息上报的数据中获得）
	// 上面的 anonymous 和 anonymous_flag 两者任选其一传入即可, 若都传入, 则使用 anonymous。
	// duration 禁言时长，单位秒，不能超过 30 天
	SetGroupAnonymousBan(context.Context, *SetGroupAnonymousBanRequest) (*emptypb.Empty, error)
	// 设置精华消息
	// set_essence_msg
	// message_id 消息 ID
	SetEssenceMsg(context.Context, *wrapperspb.Int64Value) (*emptypb.Empty, error)
	// 删除精华消息
	// delete_essence_msg
	// message_id 消息 ID
	DeleteEssenceMsg(context.Context, *wrapperspb.Int64Value) (*emptypb.Empty, error)
	// 发送群签到
	// send_group_sign
	// groupId 群号
	SendGroupSign(context.Context, *wrapperspb.Int64Value) (*emptypb.Empty, error)
	// 设置群匿名
	// set_group_anonymous
	// groupId 群号
	// enable 是否允许匿名聊天
	SetGroupAnonymous(context.Context, *SetGroupAnonymousRequest) (*emptypb.Empty, error)
	// 发送群公告
	// _send_group_notice
	// groupId 群号
	// content 公告内容
	// image 图片文件路径（可选）
	SendGroupNotice(context.Context, *SendGroupNoticeRequest) (*emptypb.Empty, error)
	// 获取群公告
	// _get_group_notice
	// groupId 群号
	GetGroupNotice(context.Context, *wrapperspb.Int64Value) (*model.GroupNoticeResultGRPC, error)
	// 群组踢人
	// set_group_kick
	// groupId 群号
	// userId QQ 号
	// rejectAddRequest 是否拒绝此人的加群请求
	SetGroupKick(context.Context, *SetGroupKickRequest) (*emptypb.Empty, error)
	// 退出群组
	// set_group_leave
	// groupId 群号
	// isDismiss 是否解散，如果登录号是群主，则仅在此项为 true 时能够解散
	SetGroupLeave(context.Context, *SetGroupLeaveRequest) (*emptypb.Empty, error)
}

// UnimplementedOnebotApiGroupOptGRPCServiceServer can be embedded to have forward compatible implementations.
type UnimplementedOnebotApiGroupOptGRPCServiceServer struct {
}

func (*UnimplementedOnebotApiGroupOptGRPCServiceServer) SetGroupName(context.Context, *SetGroupNameRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupName not implemented")
}
func (*UnimplementedOnebotApiGroupOptGRPCServiceServer) SetGroupPortrait(context.Context, *SetGroupPortraitRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupPortrait not implemented")
}
func (*UnimplementedOnebotApiGroupOptGRPCServiceServer) SetGroupAdmin(context.Context, *SetGroupAdminRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupAdmin not implemented")
}
func (*UnimplementedOnebotApiGroupOptGRPCServiceServer) SetGroupCard(context.Context, *SetGroupCardRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupCard not implemented")
}
func (*UnimplementedOnebotApiGroupOptGRPCServiceServer) SetGroupSpecialTitle(context.Context, *SetGroupSpecialTitleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupSpecialTitle not implemented")
}
func (*UnimplementedOnebotApiGroupOptGRPCServiceServer) SetGroupBan(context.Context, *SetGroupBanRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupBan not implemented")
}
func (*UnimplementedOnebotApiGroupOptGRPCServiceServer) SetGroupWholeBan(context.Context, *SetGroupWholeBanequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupWholeBan not implemented")
}
func (*UnimplementedOnebotApiGroupOptGRPCServiceServer) SetGroupAnonymousBan(context.Context, *SetGroupAnonymousBanRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupAnonymousBan not implemented")
}
func (*UnimplementedOnebotApiGroupOptGRPCServiceServer) SetEssenceMsg(context.Context, *wrapperspb.Int64Value) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEssenceMsg not implemented")
}
func (*UnimplementedOnebotApiGroupOptGRPCServiceServer) DeleteEssenceMsg(context.Context, *wrapperspb.Int64Value) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEssenceMsg not implemented")
}
func (*UnimplementedOnebotApiGroupOptGRPCServiceServer) SendGroupSign(context.Context, *wrapperspb.Int64Value) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGroupSign not implemented")
}
func (*UnimplementedOnebotApiGroupOptGRPCServiceServer) SetGroupAnonymous(context.Context, *SetGroupAnonymousRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupAnonymous not implemented")
}
func (*UnimplementedOnebotApiGroupOptGRPCServiceServer) SendGroupNotice(context.Context, *SendGroupNoticeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGroupNotice not implemented")
}
func (*UnimplementedOnebotApiGroupOptGRPCServiceServer) GetGroupNotice(context.Context, *wrapperspb.Int64Value) (*model.GroupNoticeResultGRPC, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupNotice not implemented")
}
func (*UnimplementedOnebotApiGroupOptGRPCServiceServer) SetGroupKick(context.Context, *SetGroupKickRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupKick not implemented")
}
func (*UnimplementedOnebotApiGroupOptGRPCServiceServer) SetGroupLeave(context.Context, *SetGroupLeaveRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupLeave not implemented")
}

func RegisterOnebotApiGroupOptGRPCServiceServer(s *grpc.Server, srv OnebotApiGroupOptGRPCServiceServer) {
	s.RegisterService(&_OnebotApiGroupOptGRPCService_serviceDesc, srv)
}

func _OnebotApiGroupOptGRPCService_SetGroupName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotApiGroupOptGRPCServiceServer).SetGroupName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupopt.OnebotApiGroupOptGRPCService/SetGroupName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotApiGroupOptGRPCServiceServer).SetGroupName(ctx, req.(*SetGroupNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotApiGroupOptGRPCService_SetGroupPortrait_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupPortraitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotApiGroupOptGRPCServiceServer).SetGroupPortrait(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupopt.OnebotApiGroupOptGRPCService/SetGroupPortrait",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotApiGroupOptGRPCServiceServer).SetGroupPortrait(ctx, req.(*SetGroupPortraitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotApiGroupOptGRPCService_SetGroupAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotApiGroupOptGRPCServiceServer).SetGroupAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupopt.OnebotApiGroupOptGRPCService/SetGroupAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotApiGroupOptGRPCServiceServer).SetGroupAdmin(ctx, req.(*SetGroupAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotApiGroupOptGRPCService_SetGroupCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotApiGroupOptGRPCServiceServer).SetGroupCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupopt.OnebotApiGroupOptGRPCService/SetGroupCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotApiGroupOptGRPCServiceServer).SetGroupCard(ctx, req.(*SetGroupCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotApiGroupOptGRPCService_SetGroupSpecialTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupSpecialTitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotApiGroupOptGRPCServiceServer).SetGroupSpecialTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupopt.OnebotApiGroupOptGRPCService/SetGroupSpecialTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotApiGroupOptGRPCServiceServer).SetGroupSpecialTitle(ctx, req.(*SetGroupSpecialTitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotApiGroupOptGRPCService_SetGroupBan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupBanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotApiGroupOptGRPCServiceServer).SetGroupBan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupopt.OnebotApiGroupOptGRPCService/SetGroupBan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotApiGroupOptGRPCServiceServer).SetGroupBan(ctx, req.(*SetGroupBanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotApiGroupOptGRPCService_SetGroupWholeBan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupWholeBanequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotApiGroupOptGRPCServiceServer).SetGroupWholeBan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupopt.OnebotApiGroupOptGRPCService/SetGroupWholeBan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotApiGroupOptGRPCServiceServer).SetGroupWholeBan(ctx, req.(*SetGroupWholeBanequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotApiGroupOptGRPCService_SetGroupAnonymousBan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupAnonymousBanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotApiGroupOptGRPCServiceServer).SetGroupAnonymousBan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupopt.OnebotApiGroupOptGRPCService/SetGroupAnonymousBan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotApiGroupOptGRPCServiceServer).SetGroupAnonymousBan(ctx, req.(*SetGroupAnonymousBanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotApiGroupOptGRPCService_SetEssenceMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.Int64Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotApiGroupOptGRPCServiceServer).SetEssenceMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupopt.OnebotApiGroupOptGRPCService/SetEssenceMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotApiGroupOptGRPCServiceServer).SetEssenceMsg(ctx, req.(*wrapperspb.Int64Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotApiGroupOptGRPCService_DeleteEssenceMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.Int64Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotApiGroupOptGRPCServiceServer).DeleteEssenceMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupopt.OnebotApiGroupOptGRPCService/DeleteEssenceMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotApiGroupOptGRPCServiceServer).DeleteEssenceMsg(ctx, req.(*wrapperspb.Int64Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotApiGroupOptGRPCService_SendGroupSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.Int64Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotApiGroupOptGRPCServiceServer).SendGroupSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupopt.OnebotApiGroupOptGRPCService/SendGroupSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotApiGroupOptGRPCServiceServer).SendGroupSign(ctx, req.(*wrapperspb.Int64Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotApiGroupOptGRPCService_SetGroupAnonymous_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupAnonymousRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotApiGroupOptGRPCServiceServer).SetGroupAnonymous(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupopt.OnebotApiGroupOptGRPCService/SetGroupAnonymous",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotApiGroupOptGRPCServiceServer).SetGroupAnonymous(ctx, req.(*SetGroupAnonymousRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotApiGroupOptGRPCService_SendGroupNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendGroupNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotApiGroupOptGRPCServiceServer).SendGroupNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupopt.OnebotApiGroupOptGRPCService/SendGroupNotice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotApiGroupOptGRPCServiceServer).SendGroupNotice(ctx, req.(*SendGroupNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotApiGroupOptGRPCService_GetGroupNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.Int64Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotApiGroupOptGRPCServiceServer).GetGroupNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupopt.OnebotApiGroupOptGRPCService/GetGroupNotice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotApiGroupOptGRPCServiceServer).GetGroupNotice(ctx, req.(*wrapperspb.Int64Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotApiGroupOptGRPCService_SetGroupKick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupKickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotApiGroupOptGRPCServiceServer).SetGroupKick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupopt.OnebotApiGroupOptGRPCService/SetGroupKick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotApiGroupOptGRPCServiceServer).SetGroupKick(ctx, req.(*SetGroupKickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotApiGroupOptGRPCService_SetGroupLeave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupLeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotApiGroupOptGRPCServiceServer).SetGroupLeave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupopt.OnebotApiGroupOptGRPCService/SetGroupLeave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotApiGroupOptGRPCServiceServer).SetGroupLeave(ctx, req.(*SetGroupLeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OnebotApiGroupOptGRPCService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "groupopt.OnebotApiGroupOptGRPCService",
	HandlerType: (*OnebotApiGroupOptGRPCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetGroupName",
			Handler:    _OnebotApiGroupOptGRPCService_SetGroupName_Handler,
		},
		{
			MethodName: "SetGroupPortrait",
			Handler:    _OnebotApiGroupOptGRPCService_SetGroupPortrait_Handler,
		},
		{
			MethodName: "SetGroupAdmin",
			Handler:    _OnebotApiGroupOptGRPCService_SetGroupAdmin_Handler,
		},
		{
			MethodName: "SetGroupCard",
			Handler:    _OnebotApiGroupOptGRPCService_SetGroupCard_Handler,
		},
		{
			MethodName: "SetGroupSpecialTitle",
			Handler:    _OnebotApiGroupOptGRPCService_SetGroupSpecialTitle_Handler,
		},
		{
			MethodName: "SetGroupBan",
			Handler:    _OnebotApiGroupOptGRPCService_SetGroupBan_Handler,
		},
		{
			MethodName: "SetGroupWholeBan",
			Handler:    _OnebotApiGroupOptGRPCService_SetGroupWholeBan_Handler,
		},
		{
			MethodName: "SetGroupAnonymousBan",
			Handler:    _OnebotApiGroupOptGRPCService_SetGroupAnonymousBan_Handler,
		},
		{
			MethodName: "SetEssenceMsg",
			Handler:    _OnebotApiGroupOptGRPCService_SetEssenceMsg_Handler,
		},
		{
			MethodName: "DeleteEssenceMsg",
			Handler:    _OnebotApiGroupOptGRPCService_DeleteEssenceMsg_Handler,
		},
		{
			MethodName: "SendGroupSign",
			Handler:    _OnebotApiGroupOptGRPCService_SendGroupSign_Handler,
		},
		{
			MethodName: "SetGroupAnonymous",
			Handler:    _OnebotApiGroupOptGRPCService_SetGroupAnonymous_Handler,
		},
		{
			MethodName: "SendGroupNotice",
			Handler:    _OnebotApiGroupOptGRPCService_SendGroupNotice_Handler,
		},
		{
			MethodName: "GetGroupNotice",
			Handler:    _OnebotApiGroupOptGRPCService_GetGroupNotice_Handler,
		},
		{
			MethodName: "SetGroupKick",
			Handler:    _OnebotApiGroupOptGRPCService_SetGroupKick_Handler,
		},
		{
			MethodName: "SetGroupLeave",
			Handler:    _OnebotApiGroupOptGRPCService_SetGroupLeave_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "index.proto",
}

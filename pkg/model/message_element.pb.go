// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: message_element.proto

package model

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MessageElementNodeGRPC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string                `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Nickname string                `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Content  []*MessageSegmentGRPC `protobuf:"bytes,3,rep,name=content,proto3" json:"content,omitempty"`
}

func (x *MessageElementNodeGRPC) Reset() {
	*x = MessageElementNodeGRPC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_element_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageElementNodeGRPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageElementNodeGRPC) ProtoMessage() {}

func (x *MessageElementNodeGRPC) ProtoReflect() protoreflect.Message {
	mi := &file_message_element_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageElementNodeGRPC.ProtoReflect.Descriptor instead.
func (*MessageElementNodeGRPC) Descriptor() ([]byte, []int) {
	return file_message_element_proto_rawDescGZIP(), []int{0}
}

func (x *MessageElementNodeGRPC) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MessageElementNodeGRPC) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *MessageElementNodeGRPC) GetContent() []*MessageSegmentGRPC {
	if x != nil {
		return x.Content
	}
	return nil
}

type MessageSegmentGRPC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Types that are assignable to Data:
	//	*MessageSegmentGRPC_MessageElementAt
	//	*MessageSegmentGRPC_MessageElementContact
	//	*MessageSegmentGRPC_MessageElementDice
	//	*MessageSegmentGRPC_MessageElementFace
	//	*MessageSegmentGRPC_MessageElementForward
	//	*MessageSegmentGRPC_MessageElementImage
	//	*MessageSegmentGRPC_MessageElementJson
	//	*MessageSegmentGRPC_MessageElementLocation
	//	*MessageSegmentGRPC_MessageElementMusic
	//	*MessageSegmentGRPC_MessageElementNode
	//	*MessageSegmentGRPC_MessageElementPoke
	//	*MessageSegmentGRPC_MessageElementRecord
	//	*MessageSegmentGRPC_MessageElementReply
	//	*MessageSegmentGRPC_MessageElementRps
	//	*MessageSegmentGRPC_MessageElementShake
	//	*MessageSegmentGRPC_MessageElementShare
	//	*MessageSegmentGRPC_MessageElementText
	//	*MessageSegmentGRPC_MessageElementVideo
	//	*MessageSegmentGRPC_MessageElementXml
	Data isMessageSegmentGRPC_Data `protobuf_oneof:"data"`
}

func (x *MessageSegmentGRPC) Reset() {
	*x = MessageSegmentGRPC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_element_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageSegmentGRPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageSegmentGRPC) ProtoMessage() {}

func (x *MessageSegmentGRPC) ProtoReflect() protoreflect.Message {
	mi := &file_message_element_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageSegmentGRPC.ProtoReflect.Descriptor instead.
func (*MessageSegmentGRPC) Descriptor() ([]byte, []int) {
	return file_message_element_proto_rawDescGZIP(), []int{1}
}

func (x *MessageSegmentGRPC) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (m *MessageSegmentGRPC) GetData() isMessageSegmentGRPC_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *MessageSegmentGRPC) GetMessageElementAt() *MessageElementAtGRPC {
	if x, ok := x.GetData().(*MessageSegmentGRPC_MessageElementAt); ok {
		return x.MessageElementAt
	}
	return nil
}

func (x *MessageSegmentGRPC) GetMessageElementContact() *MessageElementContactGRPC {
	if x, ok := x.GetData().(*MessageSegmentGRPC_MessageElementContact); ok {
		return x.MessageElementContact
	}
	return nil
}

func (x *MessageSegmentGRPC) GetMessageElementDice() *MessageElementDiceGRPC {
	if x, ok := x.GetData().(*MessageSegmentGRPC_MessageElementDice); ok {
		return x.MessageElementDice
	}
	return nil
}

func (x *MessageSegmentGRPC) GetMessageElementFace() *MessageElementFaceGRPC {
	if x, ok := x.GetData().(*MessageSegmentGRPC_MessageElementFace); ok {
		return x.MessageElementFace
	}
	return nil
}

func (x *MessageSegmentGRPC) GetMessageElementForward() *MessageElementForwardGRPC {
	if x, ok := x.GetData().(*MessageSegmentGRPC_MessageElementForward); ok {
		return x.MessageElementForward
	}
	return nil
}

func (x *MessageSegmentGRPC) GetMessageElementImage() *MessageElementImageGRPC {
	if x, ok := x.GetData().(*MessageSegmentGRPC_MessageElementImage); ok {
		return x.MessageElementImage
	}
	return nil
}

func (x *MessageSegmentGRPC) GetMessageElementJson() *MessageElementJsonGRPC {
	if x, ok := x.GetData().(*MessageSegmentGRPC_MessageElementJson); ok {
		return x.MessageElementJson
	}
	return nil
}

func (x *MessageSegmentGRPC) GetMessageElementLocation() *MessageElementLocationGRPC {
	if x, ok := x.GetData().(*MessageSegmentGRPC_MessageElementLocation); ok {
		return x.MessageElementLocation
	}
	return nil
}

func (x *MessageSegmentGRPC) GetMessageElementMusic() *MessageElementMusicGRPC {
	if x, ok := x.GetData().(*MessageSegmentGRPC_MessageElementMusic); ok {
		return x.MessageElementMusic
	}
	return nil
}

func (x *MessageSegmentGRPC) GetMessageElementNode() *MessageElementNodeGRPC {
	if x, ok := x.GetData().(*MessageSegmentGRPC_MessageElementNode); ok {
		return x.MessageElementNode
	}
	return nil
}

func (x *MessageSegmentGRPC) GetMessageElementPoke() *MessageElementPokeGRPC {
	if x, ok := x.GetData().(*MessageSegmentGRPC_MessageElementPoke); ok {
		return x.MessageElementPoke
	}
	return nil
}

func (x *MessageSegmentGRPC) GetMessageElementRecord() *MessageElementRecordGRPC {
	if x, ok := x.GetData().(*MessageSegmentGRPC_MessageElementRecord); ok {
		return x.MessageElementRecord
	}
	return nil
}

func (x *MessageSegmentGRPC) GetMessageElementReply() *MessageElementReplyGRPC {
	if x, ok := x.GetData().(*MessageSegmentGRPC_MessageElementReply); ok {
		return x.MessageElementReply
	}
	return nil
}

func (x *MessageSegmentGRPC) GetMessageElementRps() *MessageElementRpsGRPC {
	if x, ok := x.GetData().(*MessageSegmentGRPC_MessageElementRps); ok {
		return x.MessageElementRps
	}
	return nil
}

func (x *MessageSegmentGRPC) GetMessageElementShake() *MessageElementShakeGRPC {
	if x, ok := x.GetData().(*MessageSegmentGRPC_MessageElementShake); ok {
		return x.MessageElementShake
	}
	return nil
}

func (x *MessageSegmentGRPC) GetMessageElementShare() *MessageElementShareGRPC {
	if x, ok := x.GetData().(*MessageSegmentGRPC_MessageElementShare); ok {
		return x.MessageElementShare
	}
	return nil
}

func (x *MessageSegmentGRPC) GetMessageElementText() *MessageElementTextGRPC {
	if x, ok := x.GetData().(*MessageSegmentGRPC_MessageElementText); ok {
		return x.MessageElementText
	}
	return nil
}

func (x *MessageSegmentGRPC) GetMessageElementVideo() *MessageElementVideoGRPC {
	if x, ok := x.GetData().(*MessageSegmentGRPC_MessageElementVideo); ok {
		return x.MessageElementVideo
	}
	return nil
}

func (x *MessageSegmentGRPC) GetMessageElementXml() *MessageElementXmlGRPC {
	if x, ok := x.GetData().(*MessageSegmentGRPC_MessageElementXml); ok {
		return x.MessageElementXml
	}
	return nil
}

type isMessageSegmentGRPC_Data interface {
	isMessageSegmentGRPC_Data()
}

type MessageSegmentGRPC_MessageElementAt struct {
	MessageElementAt *MessageElementAtGRPC `protobuf:"bytes,2,opt,name=message_element_at,json=messageElementAt,proto3,oneof"`
}

type MessageSegmentGRPC_MessageElementContact struct {
	MessageElementContact *MessageElementContactGRPC `protobuf:"bytes,3,opt,name=message_element_contact,json=messageElementContact,proto3,oneof"`
}

type MessageSegmentGRPC_MessageElementDice struct {
	MessageElementDice *MessageElementDiceGRPC `protobuf:"bytes,4,opt,name=message_element_dice,json=messageElementDice,proto3,oneof"`
}

type MessageSegmentGRPC_MessageElementFace struct {
	MessageElementFace *MessageElementFaceGRPC `protobuf:"bytes,5,opt,name=message_element_face,json=messageElementFace,proto3,oneof"`
}

type MessageSegmentGRPC_MessageElementForward struct {
	MessageElementForward *MessageElementForwardGRPC `protobuf:"bytes,6,opt,name=message_element_forward,json=messageElementForward,proto3,oneof"`
}

type MessageSegmentGRPC_MessageElementImage struct {
	MessageElementImage *MessageElementImageGRPC `protobuf:"bytes,7,opt,name=message_element_image,json=messageElementImage,proto3,oneof"`
}

type MessageSegmentGRPC_MessageElementJson struct {
	MessageElementJson *MessageElementJsonGRPC `protobuf:"bytes,8,opt,name=message_element_json,json=messageElementJson,proto3,oneof"`
}

type MessageSegmentGRPC_MessageElementLocation struct {
	MessageElementLocation *MessageElementLocationGRPC `protobuf:"bytes,9,opt,name=message_element_location,json=messageElementLocation,proto3,oneof"`
}

type MessageSegmentGRPC_MessageElementMusic struct {
	MessageElementMusic *MessageElementMusicGRPC `protobuf:"bytes,10,opt,name=message_element_music,json=messageElementMusic,proto3,oneof"`
}

type MessageSegmentGRPC_MessageElementNode struct {
	MessageElementNode *MessageElementNodeGRPC `protobuf:"bytes,11,opt,name=message_element_node,json=messageElementNode,proto3,oneof"`
}

type MessageSegmentGRPC_MessageElementPoke struct {
	MessageElementPoke *MessageElementPokeGRPC `protobuf:"bytes,12,opt,name=message_element_poke,json=messageElementPoke,proto3,oneof"`
}

type MessageSegmentGRPC_MessageElementRecord struct {
	MessageElementRecord *MessageElementRecordGRPC `protobuf:"bytes,13,opt,name=message_element_record,json=messageElementRecord,proto3,oneof"`
}

type MessageSegmentGRPC_MessageElementReply struct {
	MessageElementReply *MessageElementReplyGRPC `protobuf:"bytes,14,opt,name=message_element_reply,json=messageElementReply,proto3,oneof"`
}

type MessageSegmentGRPC_MessageElementRps struct {
	MessageElementRps *MessageElementRpsGRPC `protobuf:"bytes,15,opt,name=message_element_rps,json=messageElementRps,proto3,oneof"`
}

type MessageSegmentGRPC_MessageElementShake struct {
	MessageElementShake *MessageElementShakeGRPC `protobuf:"bytes,16,opt,name=message_element_shake,json=messageElementShake,proto3,oneof"`
}

type MessageSegmentGRPC_MessageElementShare struct {
	MessageElementShare *MessageElementShareGRPC `protobuf:"bytes,17,opt,name=message_element_share,json=messageElementShare,proto3,oneof"`
}

type MessageSegmentGRPC_MessageElementText struct {
	MessageElementText *MessageElementTextGRPC `protobuf:"bytes,18,opt,name=message_element_text,json=messageElementText,proto3,oneof"`
}

type MessageSegmentGRPC_MessageElementVideo struct {
	MessageElementVideo *MessageElementVideoGRPC `protobuf:"bytes,19,opt,name=message_element_video,json=messageElementVideo,proto3,oneof"`
}

type MessageSegmentGRPC_MessageElementXml struct {
	MessageElementXml *MessageElementXmlGRPC `protobuf:"bytes,20,opt,name=message_element_xml,json=messageElementXml,proto3,oneof"`
}

func (*MessageSegmentGRPC_MessageElementAt) isMessageSegmentGRPC_Data() {}

func (*MessageSegmentGRPC_MessageElementContact) isMessageSegmentGRPC_Data() {}

func (*MessageSegmentGRPC_MessageElementDice) isMessageSegmentGRPC_Data() {}

func (*MessageSegmentGRPC_MessageElementFace) isMessageSegmentGRPC_Data() {}

func (*MessageSegmentGRPC_MessageElementForward) isMessageSegmentGRPC_Data() {}

func (*MessageSegmentGRPC_MessageElementImage) isMessageSegmentGRPC_Data() {}

func (*MessageSegmentGRPC_MessageElementJson) isMessageSegmentGRPC_Data() {}

func (*MessageSegmentGRPC_MessageElementLocation) isMessageSegmentGRPC_Data() {}

func (*MessageSegmentGRPC_MessageElementMusic) isMessageSegmentGRPC_Data() {}

func (*MessageSegmentGRPC_MessageElementNode) isMessageSegmentGRPC_Data() {}

func (*MessageSegmentGRPC_MessageElementPoke) isMessageSegmentGRPC_Data() {}

func (*MessageSegmentGRPC_MessageElementRecord) isMessageSegmentGRPC_Data() {}

func (*MessageSegmentGRPC_MessageElementReply) isMessageSegmentGRPC_Data() {}

func (*MessageSegmentGRPC_MessageElementRps) isMessageSegmentGRPC_Data() {}

func (*MessageSegmentGRPC_MessageElementShake) isMessageSegmentGRPC_Data() {}

func (*MessageSegmentGRPC_MessageElementShare) isMessageSegmentGRPC_Data() {}

func (*MessageSegmentGRPC_MessageElementText) isMessageSegmentGRPC_Data() {}

func (*MessageSegmentGRPC_MessageElementVideo) isMessageSegmentGRPC_Data() {}

func (*MessageSegmentGRPC_MessageElementXml) isMessageSegmentGRPC_Data() {}

var File_message_element_proto protoreflect.FileDescriptor

var file_message_element_proto_rawDesc = []byte{
	0x0a, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x18,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6a, 0x73, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x6b, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x70, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x78, 0x6d, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x82, 0x01, 0x0a, 0x16, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x52, 0x50, 0x43, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x52, 0x50, 0x43,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x83, 0x0d, 0x0a, 0x12, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x52, 0x50, 0x43,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x12, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x47, 0x52, 0x50, 0x43, 0x48, 0x00, 0x52,
	0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x74, 0x12, 0x5a, 0x0a, 0x17, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x47, 0x52, 0x50, 0x43, 0x48, 0x00, 0x52, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x51, 0x0a,
	0x14, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x64, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x69, 0x63, 0x65, 0x47, 0x52, 0x50, 0x43, 0x48, 0x00, 0x52, 0x12, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x63, 0x65,
	0x12, 0x51, 0x0a, 0x14, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x63, 0x65, 0x47, 0x52, 0x50, 0x43, 0x48, 0x00, 0x52,
	0x12, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46,
	0x61, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x17, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x47, 0x52, 0x50, 0x43, 0x48, 0x00, 0x52, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12,
	0x54, 0x0a, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x47, 0x52, 0x50, 0x43, 0x48, 0x00,
	0x52, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x51, 0x0a, 0x14, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x47, 0x52,
	0x50, 0x43, 0x48, 0x00, 0x52, 0x12, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x18, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x52, 0x50, 0x43, 0x48, 0x00, 0x52,
	0x16, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x75, 0x73, 0x69, 0x63,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x75, 0x73,
	0x69, 0x63, 0x47, 0x52, 0x50, 0x43, 0x48, 0x00, 0x52, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x12, 0x51, 0x0a,
	0x14, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x52, 0x50, 0x43, 0x48, 0x00, 0x52, 0x12, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x51, 0x0a, 0x14, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x6b, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x6b, 0x65, 0x47, 0x52, 0x50, 0x43, 0x48, 0x00, 0x52,
	0x12, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x6f, 0x6b, 0x65, 0x12, 0x57, 0x0a, 0x16, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x47, 0x52, 0x50, 0x43, 0x48, 0x00, 0x52, 0x14, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x54, 0x0a, 0x15,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x52, 0x50, 0x43, 0x48, 0x00, 0x52, 0x13, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x4e, 0x0a, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x70, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x70, 0x73, 0x47, 0x52, 0x50, 0x43, 0x48, 0x00, 0x52,
	0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x70, 0x73, 0x12, 0x54, 0x0a, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x6b, 0x65, 0x47, 0x52, 0x50,
	0x43, 0x48, 0x00, 0x52, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x6b, 0x65, 0x12, 0x54, 0x0a, 0x15, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x47, 0x52, 0x50, 0x43, 0x48, 0x00, 0x52, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x51,
	0x0a, 0x14, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x65, 0x78, 0x74, 0x47, 0x52, 0x50, 0x43, 0x48, 0x00, 0x52, 0x12, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x54, 0x0a, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x47, 0x52, 0x50, 0x43,
	0x48, 0x00, 0x52, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x4e, 0x0a, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x78, 0x6d, 0x6c, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x58, 0x6d, 0x6c, 0x47, 0x52,
	0x50, 0x43, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x58, 0x6d, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x0a, 0x5a, 0x08, 0x2e, 0x2e, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_message_element_proto_rawDescOnce sync.Once
	file_message_element_proto_rawDescData = file_message_element_proto_rawDesc
)

func file_message_element_proto_rawDescGZIP() []byte {
	file_message_element_proto_rawDescOnce.Do(func() {
		file_message_element_proto_rawDescData = protoimpl.X.CompressGZIP(file_message_element_proto_rawDescData)
	})
	return file_message_element_proto_rawDescData
}

var file_message_element_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_message_element_proto_goTypes = []interface{}{
	(*MessageElementNodeGRPC)(nil),     // 0: model.MessageElementNodeGRPC
	(*MessageSegmentGRPC)(nil),         // 1: model.MessageSegmentGRPC
	(*MessageElementAtGRPC)(nil),       // 2: model.MessageElementAtGRPC
	(*MessageElementContactGRPC)(nil),  // 3: model.MessageElementContactGRPC
	(*MessageElementDiceGRPC)(nil),     // 4: model.MessageElementDiceGRPC
	(*MessageElementFaceGRPC)(nil),     // 5: model.MessageElementFaceGRPC
	(*MessageElementForwardGRPC)(nil),  // 6: model.MessageElementForwardGRPC
	(*MessageElementImageGRPC)(nil),    // 7: model.MessageElementImageGRPC
	(*MessageElementJsonGRPC)(nil),     // 8: model.MessageElementJsonGRPC
	(*MessageElementLocationGRPC)(nil), // 9: model.MessageElementLocationGRPC
	(*MessageElementMusicGRPC)(nil),    // 10: model.MessageElementMusicGRPC
	(*MessageElementPokeGRPC)(nil),     // 11: model.MessageElementPokeGRPC
	(*MessageElementRecordGRPC)(nil),   // 12: model.MessageElementRecordGRPC
	(*MessageElementReplyGRPC)(nil),    // 13: model.MessageElementReplyGRPC
	(*MessageElementRpsGRPC)(nil),      // 14: model.MessageElementRpsGRPC
	(*MessageElementShakeGRPC)(nil),    // 15: model.MessageElementShakeGRPC
	(*MessageElementShareGRPC)(nil),    // 16: model.MessageElementShareGRPC
	(*MessageElementTextGRPC)(nil),     // 17: model.MessageElementTextGRPC
	(*MessageElementVideoGRPC)(nil),    // 18: model.MessageElementVideoGRPC
	(*MessageElementXmlGRPC)(nil),      // 19: model.MessageElementXmlGRPC
}
var file_message_element_proto_depIdxs = []int32{
	1,  // 0: model.MessageElementNodeGRPC.content:type_name -> model.MessageSegmentGRPC
	2,  // 1: model.MessageSegmentGRPC.message_element_at:type_name -> model.MessageElementAtGRPC
	3,  // 2: model.MessageSegmentGRPC.message_element_contact:type_name -> model.MessageElementContactGRPC
	4,  // 3: model.MessageSegmentGRPC.message_element_dice:type_name -> model.MessageElementDiceGRPC
	5,  // 4: model.MessageSegmentGRPC.message_element_face:type_name -> model.MessageElementFaceGRPC
	6,  // 5: model.MessageSegmentGRPC.message_element_forward:type_name -> model.MessageElementForwardGRPC
	7,  // 6: model.MessageSegmentGRPC.message_element_image:type_name -> model.MessageElementImageGRPC
	8,  // 7: model.MessageSegmentGRPC.message_element_json:type_name -> model.MessageElementJsonGRPC
	9,  // 8: model.MessageSegmentGRPC.message_element_location:type_name -> model.MessageElementLocationGRPC
	10, // 9: model.MessageSegmentGRPC.message_element_music:type_name -> model.MessageElementMusicGRPC
	0,  // 10: model.MessageSegmentGRPC.message_element_node:type_name -> model.MessageElementNodeGRPC
	11, // 11: model.MessageSegmentGRPC.message_element_poke:type_name -> model.MessageElementPokeGRPC
	12, // 12: model.MessageSegmentGRPC.message_element_record:type_name -> model.MessageElementRecordGRPC
	13, // 13: model.MessageSegmentGRPC.message_element_reply:type_name -> model.MessageElementReplyGRPC
	14, // 14: model.MessageSegmentGRPC.message_element_rps:type_name -> model.MessageElementRpsGRPC
	15, // 15: model.MessageSegmentGRPC.message_element_shake:type_name -> model.MessageElementShakeGRPC
	16, // 16: model.MessageSegmentGRPC.message_element_share:type_name -> model.MessageElementShareGRPC
	17, // 17: model.MessageSegmentGRPC.message_element_text:type_name -> model.MessageElementTextGRPC
	18, // 18: model.MessageSegmentGRPC.message_element_video:type_name -> model.MessageElementVideoGRPC
	19, // 19: model.MessageSegmentGRPC.message_element_xml:type_name -> model.MessageElementXmlGRPC
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_message_element_proto_init() }
func file_message_element_proto_init() {
	if File_message_element_proto != nil {
		return
	}
	file_message_element_at_proto_init()
	file_message_element_contact_proto_init()
	file_message_element_dice_proto_init()
	file_message_element_face_proto_init()
	file_message_element_forward_proto_init()
	file_message_element_image_proto_init()
	file_message_element_json_proto_init()
	file_message_element_location_proto_init()
	file_message_element_music_proto_init()
	file_message_element_poke_proto_init()
	file_message_element_record_proto_init()
	file_message_element_reply_proto_init()
	file_message_element_rps_proto_init()
	file_message_element_shake_proto_init()
	file_message_element_share_proto_init()
	file_message_element_text_proto_init()
	file_message_element_video_proto_init()
	file_message_element_xml_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_message_element_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageElementNodeGRPC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_element_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageSegmentGRPC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_message_element_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*MessageSegmentGRPC_MessageElementAt)(nil),
		(*MessageSegmentGRPC_MessageElementContact)(nil),
		(*MessageSegmentGRPC_MessageElementDice)(nil),
		(*MessageSegmentGRPC_MessageElementFace)(nil),
		(*MessageSegmentGRPC_MessageElementForward)(nil),
		(*MessageSegmentGRPC_MessageElementImage)(nil),
		(*MessageSegmentGRPC_MessageElementJson)(nil),
		(*MessageSegmentGRPC_MessageElementLocation)(nil),
		(*MessageSegmentGRPC_MessageElementMusic)(nil),
		(*MessageSegmentGRPC_MessageElementNode)(nil),
		(*MessageSegmentGRPC_MessageElementPoke)(nil),
		(*MessageSegmentGRPC_MessageElementRecord)(nil),
		(*MessageSegmentGRPC_MessageElementReply)(nil),
		(*MessageSegmentGRPC_MessageElementRps)(nil),
		(*MessageSegmentGRPC_MessageElementShake)(nil),
		(*MessageSegmentGRPC_MessageElementShare)(nil),
		(*MessageSegmentGRPC_MessageElementText)(nil),
		(*MessageSegmentGRPC_MessageElementVideo)(nil),
		(*MessageSegmentGRPC_MessageElementXml)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_message_element_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_message_element_proto_goTypes,
		DependencyIndexes: file_message_element_proto_depIdxs,
		MessageInfos:      file_message_element_proto_msgTypes,
	}.Build()
	File_message_element_proto = out.File
	file_message_element_proto_rawDesc = nil
	file_message_element_proto_goTypes = nil
	file_message_element_proto_depIdxs = nil
}
